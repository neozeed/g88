head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     91.01.13.23.56.59;  author robertb;  state Exp;
branches ;
next     1.2;

1.2
date     91.01.01.21.20.00;  author robertb;  state Exp;
branches ;
next     1.1;

1.1
date     90.05.15.16.50.42;  author robertb;  state Exp;
branches ;
next     ;


desc
@Example of how to call the db_read and db_write routines in the
debug monitor.
@


1.3
log
@This grotty little test has been multithreaded and is even
grottier.
@
text
@/* This is an example of using the db_write and db_read facility
   with gdb for the Motorola 188.  This echoes each line typed
   at the debugging terminal.

  To make an executable out of this:

    cc -c dbtest.c
    ld -o dbtest -e __start dblink crt0.o dbtest.o

  where dblink is:
SECTIONS
{
	.text 0x10000: {}
	.data 0x10800: {}
}

  where crt0.s is

	file	"crt0.s"

	global	__start
	global	_main
	text
__start:
	bsr	_main
	tb0	0,r0,254

  */

strcpy(to, from)
  char *to, *from;
{
  while (*from) {
    *to++ = *from++;
  }
  *to = '\0';
}

strlen(str)
  char *str;
{
  int cnt = 0;
  while (*str++) cnt++;
  return cnt;
}

static int
mycpunumber()
{
  switch ((int)(*(volatile unsigned long *)0xfff88018) & 0xf) {
    case 1: return 0;
    case 2: return 1;
    case 4: return 2;
    case 8: return 3;
  }
  return -1;
}

char *test_string = 
"[ ] The really quick mauve fox jumped over the lazy blue dog next to the shed\r\n";

main()
{
  void (*db_write)();	/* Pointer to entry point in tek188mon */
  int (*db_read)();	/* Pointer to entry point in tek188mon */
  int len;
  char buf[100];

/*  db_write = (int (*()))0xffe1800c;
  db_read = (int (*()))0xffe18008; */

  set_vars(&db_write, &db_read);

  strcpy(buf, "[ ] Hello\n\r");
  buf[1] = '0' + mycpunumber();
  db_write(buf, strlen(buf));

  /* Delay to give the other processors a chance to say hello. */
  for (len = 0 ; len < 10000 ; len++);

  for (;;) {
    int i;
    len = db_read(&buf[4], sizeof buf);
    db_write(buf, 4 + len);
    if (buf[4] == 's' && buf[5] == 'p' && buf[6] == 'e' && buf[7] == 'w') {
      i = buf[8] - '0';
      if (i < 1 || i > 9) i = 1;
      i *= 20;
      while (i--) {
        test_string[1] = '0' + mycpunumber();
        db_write(test_string, strlen(test_string));
      }
    }
    if (buf[4] == 'e' && buf[5] == 'x' && buf[6] == 'i' && buf[7] == 't') {
      break;
    }
  }
  strcpy(buf, "[ ] Goodbye\n\r");
  buf[1] = '0' + mycpunumber();
  db_write(buf, strlen(buf));
}

set_vars(w, r)
  unsigned long *w, *r;
{
  *w = 0xffe1800c;
  *r = 0xffe18008;
}
@


1.2
log
@Updated to be able to test host's ability to handle bursts.
And get's around new fascist C compiler.
@
text
@d8 1
a8 1
    ld -o dbtest -e _main dblink dbtest.o
d17 11
d30 8
a37 1
char *test_string = "The really quick mauve fox jumped over the lazy blue dog next to the shed\n      ";
d39 23
d74 7
a80 1
  db_write("Hello\n", 6);
d83 9
a91 5
    len = db_read(buf, sizeof buf);
    db_write(buf, len);
    if (buf[0] == 's' && buf[1] == 'p' && buf[2] == 'e' && buf[3] == 'w') {
      for (i = 0 ; i < 20 ; i++) {
        db_write(test_string, 79);
d94 3
d98 3
@


1.1
log
@Initial revision
@
text
@a0 1

d2 2
a3 1
   with gdb for the Motorola 188. 
d19 2
d25 1
a25 2
  int i, len;
  char *hello = "hello world, Moto box here\n";
d28 2
a29 2
  db_write = (int (*()))0xffe1800c;
  db_read = (int (*()))0xffe18008;
d31 3
a33 1
  (*db_write)(hello, strlen(hello));
d35 1
d38 5
d46 2
a47 2
int strlen(s)
  char *s;
d49 2
a50 8
  int len = 0;
  while (*s++ != '\0') len++;
  return len;
}

int test(a, b, c)
{
  return a + b + c;
@
