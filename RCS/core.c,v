head     1.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.16
date     90.08.19.21.35.53;  author robertb;  state Exp;
branches ;
next     1.15;

1.15
date     90.08.19.21.16.43;  author robertb;  state Exp;
branches ;
next     1.14;

1.14
date     90.06.30.17.26.44;  author robertb;  state Exp;
branches ;
next     1.13;

1.13
date     90.03.28.14.23.30;  author robertb;  state Exp;
branches ;
next     1.12;

1.12
date     90.03.15.08.56.03;  author andrew;  state Exp;
branches ;
next     1.11;

1.11
date     89.12.07.14.53.44;  author andrew;  state Exp;
branches ;
next     1.10;

1.10
date     89.11.17.08.06.38;  author davidl;  state Exp;
branches ;
next     1.9;

1.9
date     89.09.23.14.04.16;  author paulg;  state Exp;
branches ;
next     1.8;

1.8
date     89.09.21.10.11.19;  author paulg;  state Exp;
branches ;
next     1.7;

1.7
date     89.08.28.08.56.48;  author paulg;  state Exp;
branches ;
next     1.6;

1.6
date     89.08.20.18.08.17;  author paulg;  state Exp;
branches ;
next     1.5;

1.5
date     89.08.20.17.53.25;  author paulg;  state Exp;
branches ;
next     1.4;

1.4
date     89.08.19.12.32.36;  author paulg;  state Exp;
branches ;
next     1.3;

1.3
date     89.08.04.10.12.40;  author davidl;  state Exp;
branches ;
next     1.2;

1.2
date     89.07.30.23.17.53;  author paulg;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.30.23.07.02;  author paulg;  state Exp;
branches ;
next     ;


desc
@@


1.16
log
@fixed syntax errors made just before last checkin
@
text
@/* Work with core dump and executable files, for GDB.
   Copyright (C) 1986, 1987, 1989 Free Software Foundation, Inc.

   $Header: /home/vlsi/u2/cs568/g88/RCS/core.c,v 1.15 90/08/19 21:16:43 robertb Exp Locker: robertb $
   $Locker: robertb $

This file is part of GDB.  */

#include "defs.h"
#include "param.h"
#include "ui.h"

#ifdef USG
#include <sys/types.h>
#include <fcntl.h>
#endif

#ifdef COFF_ENCAPSULATE
#include "a.out.encap.h"
#else

#ifdef USEDGCOFF
#include "dghdr/a.out.h"
#else

#ifdef NON_NATIVE
#include "a.out.gnu.h"	/* -rcb 8/90 */
#else
#include <a.out.h>
#endif

#endif

#endif
#ifndef N_MAGIC
#ifdef COFF_FORMAT
#define N_MAGIC(exec) ((exec).magic)
#else
#define N_MAGIC(exec) ((exec).a_magic)
#endif
#endif
#include <stdio.h>
#include <signal.h>
#include <sys/dir.h>
#include <sys/file.h>
#include <sys/stat.h>

#ifdef UMAX_CORE
#include <sys/ptrace.h>
#else
#ifdef	TEK_HACK
#include <sys/time.h>
#endif
#endif

#ifndef N_TXTADDR
#define N_TXTADDR(hdr) 0
#endif /* no N_TXTADDR */

#ifndef N_DATADDR
#define N_DATADDR(hdr) hdr.a_text
#endif /* no N_DATADDR */

#ifndef COFF_FORMAT
#ifndef AOUTHDR
#define AOUTHDR		struct exec
#endif
#endif

extern char *sys_siglist[];

extern core_file_command (), exec_file_command ();

/* Hook for `exec_file_command' command to call.  */

void (*exec_file_display_hook) ();
   
/* File names of core file and executable file.  */

char *corefile;
char *execfile;

/* Descriptors on which core file and executable file are open.
   Note that the execchan is closed when an inferior is created
   and reopened if the inferior dies or is killed.  */

int corechan;
int execchan;

/* Last modification time of executable file.
   Also used in source.c to compare against mtime of a source file.  */

int exec_mtime;

/* Virtual addresses of bounds of the two areas of memory in the core file.  */

CORE_ADDR data_start;
CORE_ADDR data_end;
CORE_ADDR stack_start;
CORE_ADDR stack_end;

/* Virtual addresses of bounds of two areas of memory in the exec file.
   Note that the data area in the exec file is used only when there is no core file.  */

CORE_ADDR text_start;
CORE_ADDR text_end;

CORE_ADDR exec_data_start;
CORE_ADDR exec_data_end;

/* Address in executable file of start of text area data.  */

int text_offset;

/* Address in executable file of start of data area data.  */

int exec_data_offset;

/* Address in core file of start of data area data.  */

int data_offset;

/* Address in core file of start of stack area data.  */

int stack_offset;
  
#ifdef COFF_FORMAT
/* various coff data structures */

FILHDR file_hdr;
SCNHDR text_hdr;
SCNHDR data_hdr;

#endif /* not COFF_FORMAT */

/* a.out header saved in core file.  */
  
AOUTHDR core_aouthdr;

/* a.out header of exec file.  */

AOUTHDR exec_aouthdr;

void validate_files ();
unsigned int register_addr ();

/* Call this to specify the hook for exec_file_command to call back.
   This is called from the x-window display code.  */

void
specify_exec_file_hook (hook)
     void (*hook) ();
{
  exec_file_display_hook = hook;
}

/* The exec file must be closed before running an inferior.
   If it is needed again after the inferior dies, it must
   be reopened.  */

void
close_exec_file ()
{
  if (execchan >= 0)
    close (execchan);
  execchan = -1;
}

void
reopen_exec_file ()
{
  if (execchan < 0 && execfile != 0)
    {
      char *filename = concat (execfile, "", "");
      exec_file_command (filename, 0);
      free (filename);
    }
}

/* If we have both a core file and an exec file,
   print a warning if they don't go together.
   This should really check that the core file came
   from that exec file, but I don't know how to do it.  */

void
validate_files ()
{
  if (execfile != 0 && corefile != 0)
    {
      struct stat st_core;

      fstat (corechan, &st_core);

      if (N_MAGIC (core_aouthdr) != 0
	  && bcmp (&core_aouthdr, &exec_aouthdr, sizeof core_aouthdr))
	ui_fprintf(stdout, "Warning: core file does not match specified executable file.\n");
      else if (exec_mtime > st_core.st_mtime)
	ui_fprintf(stdout, "Warning: exec file is newer than core file.\n");
    }
}

/* Return the name of the executable file as a string.
   ERR nonzero means get error if there is none specified;
   otherwise return 0 in that case.  */

char *
get_exec_file (err)
     int err;
{
  if (err && execfile == 0)
    ui_badnews(-1,"No executable file specified.\n\
Use the \"exec-file\" and \"symbol-file\" commands.");
  return execfile;
}

int
have_core_file_p ()
{
  return corefile != 0;
}

static void
files_info ()
{
  char *symfile;
  extern char *get_sym_file ();

  if (execfile)
    ui_fprintf(stdout, "Executable file \"%s\".\n", execfile);
  else
    ui_fprintf(stdout, "No executable file\n");
  if (corefile == 0)
    ui_fprintf(stdout, "No core dump file\n");
  else
    ui_fprintf(stdout, "Core dump file \"%s\".\n", corefile);

  if (have_inferior_p ())
    ui_fprintf(stdout, "Using the running image of the program, rather than these files.\n");

  symfile = get_sym_file ();
  if (symfile != 0)
    ui_fprintf(stdout, "Symbols from \"%s\".\n", symfile);

  /* Display status of any active source scripts. */
  info_active_sources();

#ifdef FILES_INFO_HOOK
  if (FILES_INFO_HOOK ())
    return;
#endif

  if (! have_inferior_p ())
    {
      if (execfile)
	{
	  ui_fprintf(stdout, "Text segment in executable from 0x%x to 0x%x.\n",
		  text_start, text_end);
	  ui_fprintf(stdout, "Data segment in executable from 0x%x to 0x%x.\n",
		  exec_data_start, exec_data_end);
	  if (corefile)
	    ui_fprintf(stdout, "(But since we have a core file, we're using...)\n");
	}
      if (corefile)
	{
	  ui_fprintf(stdout, "Data segment in core file from 0x%x to 0x%x.\n",
		  data_start, data_end);
	  ui_fprintf(stdout, "Stack segment in core file from 0x%x to 0x%x.\n",
		  stack_start, stack_end);
	}
    }
}

/* Read "memory data" from core file and/or executable file.
   Returns zero if successful, 1 if xfer_core_file failed, errno value if
   ptrace failed. */

int
read_memory (memaddr, myaddr, len, usmode)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
     int usmode;
{
  if (len == 0)
    return 0;

  if (have_inferior_p ())
      return read_inferior_memory (memaddr, myaddr, len, usmode);
  else
      return xfer_core_file (memaddr, myaddr, len);
}

/* Write LEN bytes of data starting at address MYADDR
   into debugged program memory at address MEMADDR.
   Returns zero if successful, or an errno value if ptrace failed.  */

int
write_memory (memaddr, myaddr, len)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
{
  if (have_inferior_p ())
    return write_inferior_memory (memaddr, myaddr, len);
  else
    ui_badnews(-1,"Can write memory only when program being debugged is running.");
}

#ifndef XFER_CORE_FILE
/* Read from the program's memory (except for inferior processes).
   This function is misnamed, since it only reads, never writes; and
   since it will use the core file and/or executable file as necessary.

   It should be extended to write as well as read, FIXME, for patching files.

   Return 0 if address could be read, 1 if not. */

int
xfer_core_file (memaddr, myaddr, len)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
{
  register int i;
  register int val;
  int xferchan;
  char **xferfile;
  int fileptr;
  int returnval = 0;

  while (len > 0)
    {
      xferfile = 0;
      xferchan = 0;

      /* Determine which file the next bunch of addresses reside in,
	 and where in the file.  Set the file's read/write pointer
	 to point at the proper place for the desired address
	 and set xferfile and xferchan for the correct file.

	 If desired address is nonexistent, leave them zero.

	 i is set to the number of bytes that can be handled
	 along with the next address.

	 We put the most likely tests first for efficiency.  */

      /* Note that if there is no core file
	 data_start and data_end are equal.  */
      if (memaddr >= data_start && memaddr < data_end)
	{
	  i = min (len, data_end - memaddr);
	  fileptr = memaddr - data_start + data_offset;
	  xferfile = &corefile;
	  xferchan = corechan;
	}
      /* Note that if there is no core file
	 stack_start and stack_end are equal.  */
      else if (memaddr >= stack_start && memaddr < stack_end)
	{
	  i = min (len, stack_end - memaddr);
	  fileptr = memaddr - stack_start + stack_offset;
	  xferfile = &corefile;
	  xferchan = corechan;
	}
      else if (corechan < 0
	       && memaddr >= exec_data_start && memaddr < exec_data_end)
	{
	  i = min (len, exec_data_end - memaddr);
	  fileptr = memaddr - exec_data_start + exec_data_offset;
	  xferfile = &execfile;
	  xferchan = execchan;
	}
      else if (memaddr >= text_start && memaddr < text_end)
	{
	  i = min (len, text_end - memaddr);
	  fileptr = memaddr - text_start + text_offset;
	  xferfile = &execfile;
	  xferchan = execchan;
	}
      else if (memaddr < text_start)
	{
	  i = min (len, text_start - memaddr);
	}
      else if (memaddr >= text_end
	       && memaddr < (corechan >= 0? data_start : exec_data_start))
	{
	  i = min (len, data_start - memaddr);
	}
      else if (corechan >= 0
	       && memaddr >= data_end && memaddr < stack_start)
	{
	  i = min (len, stack_start - memaddr);
	}
      else if (corechan < 0 && memaddr >= exec_data_end)
	{
	  i = min (len, - memaddr);
	}
      else if (memaddr >= stack_end && stack_end != 0)
	{
	  i = min (len, - memaddr);
	}
      else
	{
	  /* Address did not classify into one of the known ranges.
	     This shouldn't happen; we catch the endpoints.  */
	  ui_badnews(1,"Internal: Bad case logic in xfer_core_file.");
	}

      /* Now we know which file to use.
	 Set up its pointer and transfer the data.  */
      if (xferfile)
	{
	  if (*xferfile == 0)
	    if (xferfile == &execfile)
	      ui_badnews(-1,"No program file to examine.");
	    else
	      ui_badnews(-1,"No core dump file or running program to examine.");
	  val = lseek (xferchan, fileptr, 0);
	  if (val < 0)
	    perror_with_name (*xferfile);
	  val = myread (xferchan, myaddr, i);
	  if (val < 0)
	    perror_with_name (*xferfile);
	}
      /* If this address is for nonexistent memory,
	 read zeros if reading, or do nothing if writing.
	 Actually, we never write.  */
      else
	{
	  bzero (myaddr, i);
	  returnval = 1;
	}

      memaddr += i;
      myaddr += i;
      len -= i;
    }
  return returnval;
}
#endif /* XFER_CORE_FILE */

/* My replacement for the read system call.
   Used like `read' but keeps going if `read' returns too soon.  */

int
myread (desc, addr, len)
     int desc;
     char *addr;
     int len;
{
  register int val;
  int orglen = len;

  while (len > 0)
    {
      val = read (desc, addr, len);
      if (val < 0)
	return val;
      if (val == 0)
	return orglen - len;
      len -= val;
      addr += val;
    }
  return orglen;
}

#ifdef REGISTER_U_ADDR

/* Return the address in the core dump or inferior of register REGNO.
   BLOCKEND is the address of the end of the user structure.  */

unsigned int
#ifdef	DG_HACK
register_addr (regnum, blockend)
     int regnum;
     int blockend;
{
  int addr;

  if (regnum < 0 || regnum >= NUM_REGS)
    ui_badnews(-1,"Invalid register number %d.", regnum);

  REGISTER_U_ADDR (addr, blockend, regnum);

  return addr;
}
#else /* not DG_HACK */
register_addr (regno, blockend)
     int regno;
     int blockend;
{
  int addr;

  if (regno < 0 || regno >= NUM_REGS)
    ui_badnews(-1,"Invalid register number %d.", regno);

  REGISTER_U_ADDR (addr, blockend, regno);

  return addr;
}
#endif /* not DG_HACK */

#endif /* REGISTER_U_ADDR */

void
_initialize_core()
{
  corechan = -1;
  execchan = -1;
  corefile = 0;
  execfile = 0;
  exec_file_display_hook = 0;

  text_start = 0;
  text_end = 0;
  data_start = 0;
  data_end = 0;
  exec_data_start = 0;
  exec_data_end = 0;
  stack_start = STACK_END_ADDR;
  stack_end = STACK_END_ADDR;

  add_com ("core-file", class_files, core_file_command,
	   "Use FILE as core dump for examining memory and registers.\n\
No arg means have no core file.");
  add_com ("exec-file", class_files, exec_file_command,
	   "Use FILE as program for getting contents of pure memory.\n\
If FILE cannot be found as specified, your execution directory path\n\
is searched for a command of that name.\n\
No arg means have no executable file.");
  add_info ("files", files_info, "Names of files being debugged.");
}

@


1.15
log
@Added #ifdef NON_NATIVE to facilitate hosting gdb on a machine
different than the machine for which it is targeted.
@
text
@d4 1
a4 1
   $Header: /home/vlsi/u2/cs568/g88/RCS/core.c,v 1.14 90/06/30 17:26:44 robertb Exp Locker: robertb $
d25 1
d27 1
a27 1
#include "a.out.gnu.h"	/* -rcb 8/19 */
d30 2
@


1.14
log
@Deleted large useless comment at top of file.
Made it use coff header files if USEDGCOFF is true.
@
text
@d4 2
a5 2
   $Header: /home/bigbird/Usr.U6/robertb/gdb/RCS/core.c,v 1.13 90/03/28 14:23:30 robertb Exp $
   $Locker:  $
d7 1
a7 1
This file is part of GDB.
a8 2
 */

d25 3
a40 1
#include <sys/param.h>
a50 1
#include <sys/user.h>
@


1.13
log
@Added a parameter to a call of read_memory() and read_inferior_memory()
to support the examine-user command (cross-gdb).
@
text
@d4 2
a5 2
   $Header: core.c,v 1.12 90/03/15 08:56:03 andrew Exp $
   $Locker: robertb $
a8 54
GDB is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

GDB is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GDB; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */



/* 
 * Changes made by Tektronix are marked by TEK_HACK, TEK_PROG_HACK, 
 * and GHSFORTRAN.
 * Changes made by Data General are marked by DG_HACK.  Compiling without these
 * #defines should be equivalent to compiling vanilla 3.2, more or less.
 *
 * The changes done by Tektronix fit into three catagories:
 *	TEK_HACK -- these were done just to get GDB to work in our environment,
 *		    including work done to support the Green Hills C compiler.
 *	TEK_PROG_HACK -- These were done to extend GDB by adding programming
 *			 support: things like if-elif-else-endif, while, and
 *			 arguments to user defined commands.
 *	GHSFORTRAN -- These changes make (will make) GDB work with the Green
 *		      Hills Fortran compiler.
 *
 *
 * In addition, I/O routines were renamed so that I/O could be directed
 * to/from the X interface if used.  See the files ui.c and ui.h for
 * more information.  Here are the routines renamed:
 *    Old name:			Renamed to:
 *	fprintf			ui_fprintf
 *	printf			ui_fprintf(stdout
 *	putchar			ui_putchar
 *	putc			ui_putc
 *	fputc			ui_putc
 *	fputs			ui_fputs
 *	puts			ui_puts
 *	gets			ui_gets
 *	fgets			ui_fgets
 *	fflush			ui_fflush
 *	system			ui_system
 *	wait			ui_wait
 *	error			ui_badnews(-1
 *	fatal			ui_badnews(1
 *	getc, fgetc		replaced with ui_gets, ui_fgets
 * These changes are not demarcated by ifdef.   
 *
 *					November 16, 1989
d23 4
d28 2
@


1.12
log
@Correct a comment.  No code change.
@
text
@d4 2
a5 2
   $Header: core.c,v 1.11 89/12/07 14:53:44 andrew Exp $
   $Locker:  $
d324 1
a324 1
read_memory (memaddr, myaddr, len)
d328 1
d334 1
a334 1
      return read_inferior_memory (memaddr, myaddr, len);
@


1.11
log
@Add report of active source script(s) to output from "info files".
@
text
@d4 2
a5 2
   $Header: core.c,v 1.10 89/11/17 08:06:38 davidl Exp $
   $Locker: andrew $
d473 1
a473 1
	 Actually, we never right.  */
@


1.10
log
@Added Tek header information.
@
text
@d4 2
a5 2
   $Header: core.c,v 1.9 89/09/23 14:04:16 paulg Exp $
   $Locker: davidl $
d289 3
@


1.9
log
@added comments to some #endifs, etc.
@
text
@d4 2
a5 2
   $Header: core.c,v 1.8 89/09/21 10:11:19 paulg Exp $
   $Locker:  $
d22 42
@


1.8
log
@add rcsid stuff.
@
text
@d4 1
a4 1
   $Header:  $
d488 1
a488 1
#else
d502 1
a502 1
#endif /* DG_HACK */
@


1.7
log
@fix typo
@
text
@d4 3
@


1.6
log
@change calles to "fatal" to "ui_badnews" with a first argument of 1.
@
text
@d52 1
a52 1
#include <sys/time.h
@


1.5
log
@change ui_badnews(0 to ui_badnews(-1
@
text
@d404 1
a404 1
	  fatal ("Internal: Bad case logic in xfer_core_file.");
@


1.4
log
@merge in Data General stuff: get clean compile.
@
text
@d212 1
a212 1
    ui_badnews(0,"No executable file specified.\n\
d303 1
a303 1
    ui_badnews(0,"Can write memory only when program being debugged is running.");
d413 1
a413 1
	      ui_badnews(0,"No program file to examine.");
d415 1
a415 1
	      ui_badnews(0,"No core dump file or running program to examine.");
d479 1
a479 1
    ui_badnews(0,"Invalid register number %d.", regnum);
d493 1
a493 1
    ui_badnews(0,"Invalid register number %d.", regno);
@


1.3
log
@Changes for initial runnable xgdb version.
@
text
@d51 3
d471 15
d499 1
@


1.2
log
@Eirik Fuller's fixes for some null pointer references.
@
text
@d22 1
d194 1
a194 1
	printf ("Warning: core file does not match specified executable file.\n");
d196 1
a196 1
	printf ("Warning: exec file is newer than core file.\n");
d209 1
a209 1
    error ("No executable file specified.\n\
d227 1
a227 1
    printf ("Executable file \"%s\".\n", execfile);
d229 1
a229 1
    printf ("No executable file\n");
d231 1
a231 1
    printf ("No core dump file\n");
d233 1
a233 1
    printf ("Core dump file \"%s\".\n", corefile);
d236 1
a236 1
    printf ("Using the running image of the program, rather than these files.\n");
d240 1
a240 1
    printf ("Symbols from \"%s\".\n", symfile);
d251 1
a251 1
	  printf ("Text segment in executable from 0x%x to 0x%x.\n",
d253 1
a253 1
	  printf ("Data segment in executable from 0x%x to 0x%x.\n",
d256 1
a256 1
	    printf ("(But since we have a core file, we're using...)\n");
d260 1
a260 1
	  printf ("Data segment in core file from 0x%x to 0x%x.\n",
d262 1
a262 1
	  printf ("Stack segment in core file from 0x%x to 0x%x.\n",
d300 1
a300 1
    error ("Can write memory only when program being debugged is running.");
d410 1
a410 1
	      error ("No program file to examine.");
d412 1
a412 1
	      error ("No core dump file or running program to examine.");
d475 1
a475 1
    error ("Invalid register number %d.", regno);
@


1.1
log
@Initial revision
@
text
@d278 1
a278 1
    return;
@
