head     1.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.9
date     90.11.01.00.18.26;  author robertb;  state Exp;
branches ;
next     1.8;

1.8
date     90.03.15.10.02.34;  author marvinw;  state Exp;
branches ;
next     1.7;

1.7
date     90.01.26.09.37.12;  author marvinw;  state Exp;
branches ;
next     1.6;

1.6
date     89.11.17.08.08.45;  author davidl;  state Exp;
branches ;
next     1.5;

1.5
date     89.10.18.12.28.04;  author marvinw;  state Exp;
branches ;
next     1.4;

1.4
date     89.09.21.10.22.42;  author paulg;  state Exp;
branches ;
next     1.3;

1.3
date     89.08.20.17.54.53;  author paulg;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.04.10.19.56;  author davidl;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.30.23.08.54;  author paulg;  state Exp;
branches ;
next     ;


desc
@@


1.9
log
@Fixed a nil pointer dereference problem that was causing g88
to crash.
@
text
@/* Perform arithmetic and other operations on values, for GDB.
   Copyright (C) 1986, 1989 Free Software Foundation, Inc.

   $Header: /am/bigbird/home/bigbird/Usr.U6/robertb/m88k/src/g88/RCS/valarith.c,v 1.8 90/03/15 10:02:34 marvinw Exp Locker: robertb $
   $Locker: robertb $

This file is part of GDB. */

#include "defs.h"
#include "param.h"
#include "symtab.h"
#include "value.h"
#include "expression.h"
#include "ui.h"


value value_x_binop ();
value value_subscripted_rvalue ();

value
value_add (arg1, arg2)
	value arg1, arg2;
{
  register value val, valint, valptr;
  register int len;
#ifdef TEK_HACK
#ifdef GHSFORTRAN
  register struct type *ty;
  register int idx;
  register struct block *blk;
  struct block *get_current_block();
#endif
#endif

  COERCE_ARRAY (arg1);
  COERCE_ARRAY (arg2);

  if ((TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_PTR
       || TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_PTR)
      &&
      (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_INT
       || TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_INT))
    /* Exactly one argument is a pointer, and one is an integer.  */
    {
      if (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_PTR)
	{
	  valptr = arg1;
	  valint = arg2;
	}
      else
	{
	  valptr = arg2;
	  valint = arg1;
	}
#if defined(TEK_HACK) && defined(GHSFORTRAN)
      ty = TYPE_TARGET_TYPE(VALUE_TYPE(valptr));
      idx = value_as_long (valint);
      blk = get_current_block();

      if (blk != 0 && BLOCK_LANGUAGE(blk) == language_fortran)
      {
	/* indexing is assumed to start at 1 (instead of 0) */
	idx--;
      }
      if (TYPE_CODE(ty) == TYPE_CODE_FORTRAN_ARRAY)
      {
	/* we have to go backwards one type to get the length */
	len = TYPE_LENGTH (TYPE_BACK_TYPE (ty));
      }
      else
	len = TYPE_LENGTH (ty);
#else
      len = TYPE_LENGTH (TYPE_TARGET_TYPE (VALUE_TYPE (valptr)));
#endif
      if (len == 0) len = 1;	/* For (void *) */
      val = value_from_long (builtin_type_long,
			     value_as_long (valptr)
#if defined(TEK_HACK) && defined(GHSFORTRAN)
			     + (len * idx));
#else
			     + (len * value_as_long (valint)));
#endif
      VALUE_TYPE (val) = VALUE_TYPE (valptr);
      return val;
    }

  return value_binop (arg1, arg2, BINOP_ADD);
}

value
value_sub (arg1, arg2)
	value arg1, arg2;
{
  register value val;

  COERCE_ARRAY (arg1);
  COERCE_ARRAY (arg2);

  if (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_PTR
      && 
      TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_INT)
    {
      val = value_from_long (builtin_type_long,
			     value_as_long (arg1)
			     - TYPE_LENGTH (TYPE_TARGET_TYPE (VALUE_TYPE (arg1))) * value_as_long (arg2));
      VALUE_TYPE (val) = VALUE_TYPE (arg1);
      return val;
    }

  if (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_PTR
      && 
      VALUE_TYPE (arg1) == VALUE_TYPE (arg2))
    {
      val = value_from_long (builtin_type_long,
			     (value_as_long (arg1) - value_as_long (arg2))
			     / TYPE_LENGTH (TYPE_TARGET_TYPE (VALUE_TYPE (arg1))));
      return val;
    }

  return value_binop (arg1, arg2, BINOP_SUB);
}

/* Return the value of ARRAY[IDX].  */

value
value_subscript (array, idx)
     value array, idx;
{
#if defined(TEK_HACK) && defined(GHSFORTRAN)
  if ((TYPE_CODE (VALUE_TYPE (array)) == TYPE_CODE_ARRAY ||
       TYPE_CODE (VALUE_TYPE (array)) == TYPE_CODE_FORTRAN_ARRAY )
#else
  if (TYPE_CODE (VALUE_TYPE (array)) == TYPE_CODE_ARRAY
#endif
      && VALUE_LVAL (array) != lval_memory)
    return value_subscripted_rvalue (array, idx);
  else
    return value_ind (value_add (array, idx));
}

/* Return the value of EXPR[IDX], expr an aggregate rvalue
   (eg, a vector register) */

value
value_subscripted_rvalue (array, idx)
     value array, idx;
{
  struct type *elt_type = TYPE_TARGET_TYPE (VALUE_TYPE (array));
  int elt_size = TYPE_LENGTH (elt_type);
  int elt_offs = elt_size * value_as_long (idx);
  value v;

  if (elt_offs >= TYPE_LENGTH (VALUE_TYPE (array)))
    ui_badnews(-1,"no such vector element");

  if (TYPE_CODE (elt_type) == TYPE_CODE_FLT) 
    {
      if (elt_size == sizeof (float))
	v = value_from_double (elt_type, (double) *(float *)
			       (VALUE_CONTENTS (array) + elt_offs));
      else
	v = value_from_double (elt_type, *(double *)
			       (VALUE_CONTENTS (array) + elt_offs));
    }
  else
    {
      int offs;
      union {int i; char c;} test;
      test.i = 1;
      if (test.c == 1)
	offs = 0;
      else
	offs = sizeof (LONGEST) - elt_size;
      v = value_from_long (elt_type, *(LONGEST *)
			   (VALUE_CONTENTS (array) + elt_offs - offs));
    }

  if (VALUE_LVAL (array) == lval_internalvar)
    VALUE_LVAL (v) = lval_internalvar_component;
  else
    VALUE_LVAL (v) = not_lval;
  VALUE_ADDRESS (v) = VALUE_ADDRESS (array);
  VALUE_OFFSET (v) = VALUE_OFFSET (array) + elt_offs;
  VALUE_BITSIZE (v) = elt_size * 8;
  return v;
}

/* Check to see if either argument is a structure.  This is called so
   we know whether to go ahead with the normal binop or look for a 
   user defined function instead.

   For now, we do not overload the `=' operator.  */

int
binop_user_defined_p (op, arg1, arg2)
     enum exp_opcode op;
     value arg1, arg2;
{
  if (op == BINOP_ASSIGN)
    return 0;
  return (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_STRUCT
	  || TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_STRUCT
	  || (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_REF
	      && TYPE_CODE (TYPE_TARGET_TYPE (VALUE_TYPE (arg1))) == TYPE_CODE_STRUCT)
	  || (TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_REF
	      && TYPE_CODE (TYPE_TARGET_TYPE (VALUE_TYPE (arg2))) == TYPE_CODE_STRUCT));
}

/* Check to see if argument is a structure.  This is called so
   we know whether to go ahead with the normal unop or look for a 
   user defined function instead.

   For now, we do not overload the `&' operator.  */

int unop_user_defined_p (op, arg1)
     enum exp_opcode op;
     value arg1;
{
  if (op == UNOP_ADDR)
    return 0;
  return (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_STRUCT
	  || (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_REF
	      && TYPE_CODE (TYPE_TARGET_TYPE (VALUE_TYPE (arg1))) == TYPE_CODE_STRUCT));
}

/* We know either arg1 or arg2 is a structure, so try to find the right
   user defined function.  Create an argument vector that calls 
   arg1.operator @@ (arg1,arg2) and return that value (where '@@' is any
   binary operator which is legal for GNU C++).  */

value
value_x_binop (arg1, arg2, op, otherop)
     value arg1, arg2;
     int op, otherop;
{
  value * argvec;
  char *ptr;
  char tstr[13];
  
  COERCE_ENUM (arg1);
  COERCE_ENUM (arg2);

  /* now we know that what we have to do is construct our
     arg vector and find the right function to call it with.  */

  if (TYPE_CODE (VALUE_TYPE (arg1)) != TYPE_CODE_STRUCT)
    ui_badnews(-1,"friend functions not implemented yet");

  argvec = (value *) alloca (sizeof (value) * 4);
  argvec[1] = value_addr (arg1);
  argvec[2] = arg2;
  argvec[3] = 0;

  /* make the right function name up */  
  strcpy(tstr, "operator __");
  ptr = tstr+9;
  switch (op)
    {
    case BINOP_ADD:	strcpy(ptr,"+"); break;
    case BINOP_SUB:	strcpy(ptr,"-"); break;
    case BINOP_MUL:	strcpy(ptr,"*"); break;
    case BINOP_DIV:	strcpy(ptr,"/"); break;
    case BINOP_REM:	strcpy(ptr,"%"); break;
    case BINOP_LSH:	strcpy(ptr,"<<"); break;
    case BINOP_RSH:	strcpy(ptr,">>"); break;
    case BINOP_LOGAND:	strcpy(ptr,"&"); break;
    case BINOP_LOGIOR:	strcpy(ptr,"|"); break;
    case BINOP_LOGXOR:	strcpy(ptr,"^"); break;
    case BINOP_AND:	strcpy(ptr,"&&"); break;
    case BINOP_OR:	strcpy(ptr,"||"); break;
    case BINOP_MIN:	strcpy(ptr,"<?"); break;
    case BINOP_MAX:	strcpy(ptr,">?"); break;
    case BINOP_ASSIGN:	strcpy(ptr,"="); break;
    case BINOP_ASSIGN_MODIFY:	
      switch (otherop)
	{
	case BINOP_ADD:      strcpy(ptr,"+="); break;
	case BINOP_SUB:      strcpy(ptr,"-="); break;
	case BINOP_MUL:      strcpy(ptr,"*="); break;
	case BINOP_DIV:      strcpy(ptr,"/="); break;
	case BINOP_REM:      strcpy(ptr,"%="); break;
	case BINOP_LOGAND:   strcpy(ptr,"&="); break;
	case BINOP_LOGIOR:   strcpy(ptr,"|="); break;
	case BINOP_LOGXOR:   strcpy(ptr,"^="); break;
	default:
	  ui_badnews(-1,"Invalid binary operation specified.");
	}
      break;
    case BINOP_SUBSCRIPT: strcpy(ptr,"[]"); break;
    case BINOP_EQUAL:	  strcpy(ptr,"=="); break;
    case BINOP_NOTEQUAL:  strcpy(ptr,"!="); break;
    case BINOP_LESS:      strcpy(ptr,"<"); break;
    case BINOP_GTR:       strcpy(ptr,">"); break;
    case BINOP_GEQ:       strcpy(ptr,">="); break;
    case BINOP_LEQ:       strcpy(ptr,"<="); break;
    default:
      ui_badnews(-1,"Invalid binary operation specified.");
    }
  argvec[0] = value_struct_elt (arg1, argvec+1, tstr, "structure");
  if (argvec[0])
#ifdef TEK_HACK
    return call_function (argvec[0], 2, argvec + 1, 0);
#else
    return call_function (argvec[0], 2, argvec + 1);
#endif
  else ui_badnews(-1,"member function %s not found", tstr);
}

/* We know that arg1 is a structure, so try to find a unary user
   defined operator that matches the operator in question.  
   Create an argument vector that calls arg1.operator @@ (arg1)
   and return that value (where '@@' is (almost) any unary operator which
   is legal for GNU C++).  */

value
value_x_unop (arg1, op)
     value arg1;
     int op;
{
  value * argvec;
  char *ptr;
  char tstr[13];
  
  COERCE_ENUM (arg1);

  /* now we know that what we have to do is construct our
     arg vector and find the right function to call it with.  */

  if (TYPE_CODE (VALUE_TYPE (arg1)) != TYPE_CODE_STRUCT)
    ui_badnews(-1,"friend functions not implemented yet");

  argvec = (value *) alloca (sizeof (value) * 3);
  argvec[1] = value_addr (arg1);
  argvec[2] = 0;

  /* make the right function name up */  
  strcpy(tstr,"operator __");
  ptr = tstr+9;
  switch (op)
    {
    case UNOP_PREINCREMENT:	strcpy(ptr,"++"); break;
    case UNOP_PREDECREMENT:	strcpy(ptr,"++"); break;
    case UNOP_POSTINCREMENT:	strcpy(ptr,"++"); break;
    case UNOP_POSTDECREMENT:	strcpy(ptr,"++"); break;
    case UNOP_ZEROP:	strcpy(ptr,"!"); break;
    case UNOP_LOGNOT:	strcpy(ptr,"~"); break;
    case UNOP_NEG:	strcpy(ptr,"-"); break;
    default:
      ui_badnews(-1,"Invalid binary operation specified.");
    }
  argvec[0] = value_struct_elt (arg1, argvec+1, tstr, "structure");
  if (argvec[0])
#ifdef TEK_HACK
    return call_function (argvec[0], 1, argvec + 1, 0);
#else
    return call_function (argvec[0], 1, argvec + 1);
#endif
  else ui_badnews(-1,"member function %s not found", tstr);
}

/* Perform a binary operation on two integers or two floats.
   Does not support addition and subtraction on pointers;
   use value_add or value_sub if you want to handle those possibilities.  */

value
value_binop (arg1, arg2, op)
     value arg1, arg2;
     int op;
{
  register value val;

  COERCE_ENUM (arg1);
  COERCE_ENUM (arg2);

  if ((TYPE_CODE (VALUE_TYPE (arg1)) != TYPE_CODE_FLT
       &&
       TYPE_CODE (VALUE_TYPE (arg1)) != TYPE_CODE_INT)
      ||
      (TYPE_CODE (VALUE_TYPE (arg2)) != TYPE_CODE_FLT
       &&
       TYPE_CODE (VALUE_TYPE (arg2)) != TYPE_CODE_INT))
    ui_badnews(-1,"Argument to arithmetic operation not a number.");

  if (TYPE_CODE (VALUE_TYPE (arg1)) == TYPE_CODE_FLT
      ||
      TYPE_CODE (VALUE_TYPE (arg2)) == TYPE_CODE_FLT)
    {
      double v1, v2, v;
      v1 = value_as_double (arg1);
      v2 = value_as_double (arg2);
      switch (op)
	{
	case BINOP_ADD:
	  v = v1 + v2;
	  break;

	case BINOP_SUB:
	  v = v1 - v2;
	  break;

	case BINOP_MUL:
	  v = v1 * v2;
	  break;

	case BINOP_DIV:
	  v = v1 / v2;
	  break;

	default:
	  ui_badnews(-1,"Integer-only operation on floating point number.");
	}

      val = allocate_value (builtin_type_double);
      *(double *) VALUE_CONTENTS (val) = v;
    }
  else
    /* Integral operations here.  */
    {
      /* Should we promote to unsigned longest?  */
      if ((TYPE_UNSIGNED (VALUE_TYPE (arg1))
	   || TYPE_UNSIGNED (VALUE_TYPE (arg2)))
	  && (TYPE_LENGTH (VALUE_TYPE (arg1)) >= sizeof (unsigned LONGEST)
	      || TYPE_LENGTH (VALUE_TYPE (arg1)) >= sizeof (unsigned LONGEST)))
	{
	  unsigned LONGEST v1, v2, v;
	  v1 = (unsigned LONGEST) value_as_long (arg1);
	  v2 = (unsigned LONGEST) value_as_long (arg2);
	  
	  switch (op)
	    {
	    case BINOP_ADD:
	      v = v1 + v2;
	      break;
	      
	    case BINOP_SUB:
	      v = v1 - v2;
	      break;
	      
	    case BINOP_MUL:
	      v = v1 * v2;
	      break;
	      
	    case BINOP_DIV:
	      v = v1 / v2;
	      break;
	      
	    case BINOP_REM:
	      v = v1 % v2;
	      break;
	      
	    case BINOP_LSH:
	      v = v1 << v2;
	      break;
	      
	    case BINOP_RSH:
	      v = v1 >> v2;
	      break;
	      
	    case BINOP_LOGAND:
	      v = v1 & v2;
	      break;
	      
	    case BINOP_LOGIOR:
	      v = v1 | v2;
	      break;
	      
	    case BINOP_LOGXOR:
	      v = v1 ^ v2;
	      break;
	      
	    case BINOP_AND:
	      v = v1 && v2;
	      break;
	      
	    case BINOP_OR:
	      v = v1 || v2;
	      break;
	      
	    case BINOP_MIN:
	      v = v1 < v2 ? v1 : v2;
	      break;
	      
	    case BINOP_MAX:
	      v = v1 > v2 ? v1 : v2;
	      break;
	      
	    default:
	      ui_badnews(-1,"Invalid binary operation on numbers.");
	    }

	  val = allocate_value (BUILTIN_TYPE_UNSIGNED_LONGEST);
	  *(unsigned LONGEST *) VALUE_CONTENTS (val) = v;
	}
      else
	{
	  LONGEST v1, v2, v;
	  v1 = value_as_long (arg1);
	  v2 = value_as_long (arg2);
	  
	  switch (op)
	    {
	    case BINOP_ADD:
	      v = v1 + v2;
	      break;
	      
	    case BINOP_SUB:
	      v = v1 - v2;
	      break;
	      
	    case BINOP_MUL:
	      v = v1 * v2;
	      break;
	      
	    case BINOP_DIV:
	      v = v1 / v2;
	      break;
	      
	    case BINOP_REM:
	      v = v1 % v2;
	      break;
	      
	    case BINOP_LSH:
	      v = v1 << v2;
	      break;
	      
	    case BINOP_RSH:
	      v = v1 >> v2;
	      break;
	      
	    case BINOP_LOGAND:
	      v = v1 & v2;
	      break;
	      
	    case BINOP_LOGIOR:
	      v = v1 | v2;
	      break;
	      
	    case BINOP_LOGXOR:
	      v = v1 ^ v2;
	      break;
	      
	    case BINOP_AND:
	      v = v1 && v2;
	      break;
	      
	    case BINOP_OR:
	      v = v1 || v2;
	      break;
	      
	    case BINOP_MIN:
	      v = v1 < v2 ? v1 : v2;
	      break;
	      
	    case BINOP_MAX:
	      v = v1 > v2 ? v1 : v2;
	      break;
	      
	    default:
	      ui_badnews(-1,"Invalid binary operation on numbers.");
	    }
	  
	  val = allocate_value (BUILTIN_TYPE_LONGEST);
	  *(LONGEST *) VALUE_CONTENTS (val) = v;
	}
    }

  return val;
}

/* Simulate the C operator ! -- return 1 if ARG1 contains zeros.  */

int
value_zerop (arg1)
     value arg1;
{
  register int len;
  register char *p;

  COERCE_ARRAY (arg1);

  len = TYPE_LENGTH (VALUE_TYPE (arg1));
  p = VALUE_CONTENTS (arg1);

  while (--len >= 0)
    {
      if (*p++)
	break;
    }

  return len < 0;
}

/* Simulate the C operator == by returning a 1
   iff ARG1 and ARG2 have equal contents.  */

int
value_equal (arg1, arg2)
     register value arg1, arg2;

{
  register int len;
  register char *p1, *p2;
  enum type_code code1;
  enum type_code code2;

  COERCE_ARRAY (arg1);
  COERCE_ARRAY (arg2);

  code1 = TYPE_CODE (VALUE_TYPE (arg1));
  code2 = TYPE_CODE (VALUE_TYPE (arg2));

  if (code1 == TYPE_CODE_INT && code2 == TYPE_CODE_INT)
    return value_as_long (arg1) == value_as_long (arg2);
  else if ((code1 == TYPE_CODE_FLT || code1 == TYPE_CODE_INT)
	   && (code2 == TYPE_CODE_FLT || code2 == TYPE_CODE_INT))
    return value_as_double (arg1) == value_as_double (arg2);
  else if ((code1 == TYPE_CODE_PTR && code2 == TYPE_CODE_INT)
	   || (code2 == TYPE_CODE_PTR && code1 == TYPE_CODE_INT))
    return (char *) value_as_long (arg1) == (char *) value_as_long (arg2);
  else if (code1 == code2
	   && ((len = TYPE_LENGTH (VALUE_TYPE (arg1)))
	       == TYPE_LENGTH (VALUE_TYPE (arg2))))
    {
      p1 = VALUE_CONTENTS (arg1);
      p2 = VALUE_CONTENTS (arg2);
      while (--len >= 0)
	{
	  if (*p1++ != *p2++)
	    break;
	}
      return len < 0;
    }
  else
    ui_badnews(-1,"Invalid type combination in equality test.");
}

/* Simulate the C operator < by returning 1
   iff ARG1's contents are less than ARG2's.  */

int
value_less (arg1, arg2)
     register value arg1, arg2;
{
  register enum type_code code1;
  register enum type_code code2;

  COERCE_ARRAY (arg1);
  COERCE_ARRAY (arg2);

  code1 = TYPE_CODE (VALUE_TYPE (arg1));
  code2 = TYPE_CODE (VALUE_TYPE (arg2));

  if (code1 == TYPE_CODE_INT && code2 == TYPE_CODE_INT)
    return value_as_long (arg1) < value_as_long (arg2);
  else if ((code1 == TYPE_CODE_FLT || code1 == TYPE_CODE_INT)
	   && (code2 == TYPE_CODE_FLT || code2 == TYPE_CODE_INT))
    return value_as_double (arg1) < value_as_double (arg2);
  else if ((code1 == TYPE_CODE_PTR || code1 == TYPE_CODE_INT)
	   && (code2 == TYPE_CODE_PTR || code2 == TYPE_CODE_INT))
    return (char *) value_as_long (arg1) < (char *) value_as_long (arg2);
  else
    ui_badnews(-1,"Invalid type combination in ordering comparison.");
}

/* The unary operators - and ~.  Both free the argument ARG1.  */

value
value_neg (arg1)
     register value arg1;
{
  register struct type *type;

  COERCE_ENUM (arg1);

  type = VALUE_TYPE (arg1);

  if (TYPE_CODE (type) == TYPE_CODE_FLT)
    return value_from_double (type, - value_as_double (arg1));
  else if (TYPE_CODE (type) == TYPE_CODE_INT)
    return value_from_long (type, - value_as_long (arg1));
  else
    ui_badnews(-1,"Argument to negate operation not a number.");
}

value
value_lognot (arg1)
     register value arg1;
{
  COERCE_ENUM (arg1);

  if (TYPE_CODE (VALUE_TYPE (arg1)) != TYPE_CODE_INT)
    ui_badnews(-1,"Argument to complement operation not an integer.");

  return value_from_long (VALUE_TYPE (arg1), ~ value_as_long (arg1));
}

@


1.8
log
@Fixed bug BLK02096.  We can now print out elements of FORTRAN arrays of
type INTEGER*1.
@
text
@d4 2
a5 2
   $Header: valarith.c,v 1.7 90/01/26 09:37:12 marvinw Exp $
   $Locker: marvinw $
d7 1
a7 1
This file is part of GDB.
a8 56
GDB is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

GDB is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GDB; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */



/* 
 * Changes made by Tektronix are marked by TEK_HACK, TEK_PROG_HACK, 
 * and GHSFORTRAN.
 * Changes made by Data General are marked by DG_HACK.  Compiling without these
 * #defines should be equivalent to compiling vanilla 3.2, more or less.
 *
 * The changes done by Tektronix fit into three catagories:
 *	TEK_HACK -- these were done just to get GDB to work in our environment,
 *		    including work done to support the Green Hills C compiler.
 *	TEK_PROG_HACK -- These were done to extend GDB by adding programming
 *			 support: things like if-elif-else-endif, while, and
 *			 arguments to user defined commands.
 *	GHSFORTRAN -- These changes make (will make) GDB work with the Green
 *		      Hills Fortran compiler.
 *
 *
 * In addition, I/O routines were renamed so that I/O could be directed
 * to/from the X interface if used.  See the files ui.c and ui.h for
 * more information.  Here are the routines renamed:
 *    Old name:			Renamed to:
 *	fprintf			ui_fprintf
 *	printf			ui_fprintf(stdout
 *	putchar			ui_putchar
 *	putc			ui_putc
 *	fputc			ui_putc
 *	fputs			ui_fputs
 *	puts			ui_puts
 *	gets			ui_gets
 *	fgets			ui_fgets
 *	fflush			ui_fflush
 *	system			ui_system
 *	wait			ui_wait
 *	error			ui_badnews(-1
 *	fatal			ui_badnews(1
 *	getc, fgetc		replaced with ui_gets, ui_fgets
 * These changes are not demarcated by ifdef.   
 *
 *					November 16, 1989
 */

d60 1
a60 1
      if (BLOCK_LANGUAGE(blk) == language_fortran)
@


1.7
log
@Fixed BLK1924, we now pass arguments by reference to FORTRAN functions.
@
text
@d4 1
a4 1
   $Header: valarith.c,v 1.6 89/11/17 08:08:45 davidl Exp $
d86 2
d114 7
d124 1
a124 3
      len = TYPE_LENGTH (TYPE_BACK_TYPE (ty));
	/* indexing is assumed to start at 1 (instead of 0) */
      idx--;
d126 2
a127 2
else
      len = TYPE_LENGTH (ty);
@


1.6
log
@Added Tek header information.
@
text
@d4 2
a5 2
   $Header: valarith.c,v 1.5 89/10/18 12:28:04 marvinw Exp $
   $Locker: davidl $
d350 3
d354 1
d402 3
d406 1
@


1.5
log
@Added support for fortran arrays.
@
text
@d4 2
a5 2
   $Header: valarith.c,v 1.4 89/09/21 10:22:42 paulg Exp $
   $Locker:  $
d22 42
@


1.4
log
@add rcsid stuff
@
text
@d4 1
a4 1
   $Header:  $
d40 6
d67 13
d81 1
d85 3
d89 1
d136 4
d141 1
@


1.3
log
@change ui_badnews(0 to ui_badnews(-1
@
text
@d4 3
@


1.2
log
@Changes for initial runnable xgdb version.
@
text
@d129 1
a129 1
    ui_badnews(0,"no such vector element");
d222 1
a222 1
    ui_badnews(0,"friend functions not implemented yet");
d261 1
a261 1
	  ui_badnews(0,"Invalid binary operation specified.");
d272 1
a272 1
      ui_badnews(0,"Invalid binary operation specified.");
d277 1
a277 1
  else ui_badnews(0,"member function %s not found", tstr);
d301 1
a301 1
    ui_badnews(0,"friend functions not implemented yet");
d320 1
a320 1
      ui_badnews(0,"Invalid binary operation specified.");
d325 1
a325 1
  else ui_badnews(0,"member function %s not found", tstr);
d349 1
a349 1
    ui_badnews(0,"Argument to arithmetic operation not a number.");
d377 1
a377 1
	  ui_badnews(0,"Integer-only operation on floating point number.");
d455 1
a455 1
	      ui_badnews(0,"Invalid binary operation on numbers.");
d526 1
a526 1
	      ui_badnews(0,"Invalid binary operation on numbers.");
d601 1
a601 1
    ui_badnews(0,"Invalid type combination in equality test.");
d629 1
a629 1
    ui_badnews(0,"Invalid type combination in ordering comparison.");
d649 1
a649 1
    ui_badnews(0,"Argument to negate operation not a number.");
d659 1
a659 1
    ui_badnews(0,"Argument to complement operation not an integer.");
@


1.1
log
@Initial revision
@
text
@d25 1
d129 1
a129 1
    error ("no such vector element");
d222 1
a222 1
    error ("friend functions not implemented yet");
d261 1
a261 1
	  error ("Invalid binary operation specified.");
d272 1
a272 1
      error ("Invalid binary operation specified.");
d277 1
a277 1
  else error ("member function %s not found", tstr);
d301 1
a301 1
    error ("friend functions not implemented yet");
d320 1
a320 1
      error ("Invalid binary operation specified.");
d325 1
a325 1
  else error ("member function %s not found", tstr);
d349 1
a349 1
    error ("Argument to arithmetic operation not a number.");
d377 1
a377 1
	  error ("Integer-only operation on floating point number.");
d455 1
a455 1
	      error ("Invalid binary operation on numbers.");
d526 1
a526 1
	      error ("Invalid binary operation on numbers.");
d601 1
a601 1
    error ("Invalid type combination in equality test.");
d629 1
a629 1
    error ("Invalid type combination in ordering comparison.");
d649 1
a649 1
    error ("Argument to negate operation not a number.");
d659 1
a659 1
    error ("Argument to complement operation not an integer.");
@
