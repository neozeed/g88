head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     91.01.13.23.40.34;  author robertb;  state Exp;
branches ;
next     1.5;

1.5
date     90.12.29.21.30.17;  author robertb;  state Exp;
branches ;
next     1.4;

1.4
date     90.09.29.21.08.21;  author robertb;  state Exp;
branches ;
next     1.3;

1.3
date     90.05.16.10.23.04;  author robertb;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.14.17.27.32;  author robertb;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.10.11.40.05;  author robertb;  state Exp;
branches ;
next     ;


desc
@Program that generates the .h file that is included by monlow.s.
This .h file has the offsets of the register images in the monitor
registe area.
@


1.6
log
@Removed obsolete warning message.  Moved macro to mon.h so that
the cross debugger can use it.
@
text
@/*
	Copyright (c) 1987, 1988, 1989, 1990 by Tektronix, Inc.

    It may freely be redistributed and modified so long as the copyright
    notices and credit attributions remain intact.
 */
#include "mon.h"

main()
{
    int i;

    struct all_vars v;
    printf("/*\n");
    printf(" * This file is automatically generated when the ROMs are\n");
    printf(" * built.  This has the structure offsets of the all_vars\n");
    printf(" * structure, which is used by code in mon.c and monstart.s\n");
    printf(" */\n");
    printf("\n");
    for (i = 0 ; i < 32 ; i++) {
      printf("\tDM_REG_R%d = %d\n", i, soff(dm_genregs[i]));
    }
    printf("\tDM_REG_IP = %d\n", soff(dm_ip));
    printf("\tDM_REG_PID = %d\n", soff(dm_pid));
    printf("\tDM_REG_PSR = %d\n", soff(dm_psr));
    printf("\tDM_REG_TPSR = %d\n", soff(dm_tpsr));
    printf("\tDM_REG_SSBR = %d\n", soff(dm_ssbr));
    printf("\tDM_REG_SXIP = %d\n", soff(dm_sxip));
    printf("\tDM_REG_SNIP = %d\n", soff(dm_snip));
    printf("\tDM_REG_SFIP = %d\n", soff(dm_sfip));
    printf("\tDM_REG_VBR = %d\n", soff(dm_vbr));

    printf("\tDM_REG_DMT0 = %d\n", soff(dm_dmt0));
    printf("\tDM_REG_DMA0 = %d\n", soff(dm_dma0));
    printf("\tDM_REG_DMD0 = %d\n", soff(dm_dmd0));

    printf("\tDM_REG_DMT1 = %d\n", soff(dm_dmt1));
    printf("\tDM_REG_DMA1 = %d\n", soff(dm_dma1));
    printf("\tDM_REG_DMD1 = %d\n", soff(dm_dmd1));

    printf("\tDM_REG_DMT2 = %d\n", soff(dm_dmt2));
    printf("\tDM_REG_DMA2 = %d\n", soff(dm_dma2));
    printf("\tDM_REG_DMD2 = %d\n", soff(dm_dmd2));

    printf("\tDM_REG_SR0 = %d\n", soff(dm_sr0));
    printf("\tDM_REG_SR1 = %d\n", soff(dm_sr1));
    printf("\tDM_REG_SR2 = %d\n", soff(dm_sr2));
    printf("\tDM_REG_SR3 = %d\n", soff(dm_sr3));

    printf("\tDM_REG_FPECR = %d\n", soff(dm_ip));
    printf("\tDM_REG_FPHS1 = %d\n", soff(dm_fphs1));
    printf("\tDM_REG_FPLS1 = %d\n", soff(dm_fpls1));
    printf("\tDM_REG_FPHS2 = %d\n", soff(dm_fphs2));
    printf("\tDM_REG_FPLS2 = %d\n", soff(dm_fpls2));

    printf("\tDM_REG_FPPT = %d\n", soff(dm_fppt));
    printf("\tDM_REG_FPRH = %d\n", soff(dm_fprh));
    printf("\tDM_REG_FPRL = %d\n", soff(dm_fprl));
    printf("\tDM_REG_FPIT = %d\n", soff(dm_fpit));
    printf("\tDM_REG_FPSR = %d\n", soff(dm_fpsr));
    printf("\tDM_REG_FPCR = %d\n", soff(dm_fpcr));
    printf("\tDM_REG_CE_INTR_MSK = %d\n", soff(dm_ce_intr_msk));
    printf("\tDM_EXCEPTION_CODE = %d\n", soff(dm_exception_code));
    printf("\tDM_IN_MON = %d\n", soff(dm_in_mon));
    printf("\tDM_DACC_ADDRESS = %d\n", soff(dm_dacc_address));
    printf("\tDM_CALL_ON_MON_ENTRY = %d\n", soff(dm_call_on_mon_entry));
    printf("\tDM_CALL_ON_MON_EXIT = %d\n", soff(dm_call_on_mon_exit));
    printf("\tDM_RESTART_COUNT = %d\n", soff(dm_restart_count));
    printf("#define\tDM_SIZEOF_ALL_VARS\t(%d)\n", roundup(sizeof v));
    printf("#define\tDM_STACK\t(%d)\n", 
				roundup(soff(dm_stackarea[MONSTACKSIZE])));

    exit(0);
}

/*
 * Return the least multiple of 8 greater than or equal to the passed
 * argument.
 */
roundup(i)
    unsigned i;
{
    return (i + 7) & ~7;
}
@


1.5
log
@Added fields.
@
text
@a8 1
#define	soff(field)	(char *)&(v.field)-(char *)&v
d12 1
a13 1

a72 4
    if (roundup(sizeof v)*13 > 15000) {
	printf("Warning: debug monitor area may be too big.\n");
        printf("Check that DEBUG_AREA(13) does not go past 0x8000.\n");
    }
@


1.4
log
@Updated for gas syntax
@
text
@d67 3
@


1.3
log
@Changed Tek copyright
@
text
@d22 1
a22 1
      printf("\tdef\tDM_REG_R%d,%d\n", i, soff(dm_genregs[i]));
d24 9
a32 9
    printf("\tdef\tDM_REG_IP,%d\n", soff(dm_ip));
    printf("\tdef\tDM_REG_PID,%d\n", soff(dm_pid));
    printf("\tdef\tDM_REG_PSR,%d\n", soff(dm_psr));
    printf("\tdef\tDM_REG_TPSR,%d\n", soff(dm_tpsr));
    printf("\tdef\tDM_REG_SSBR,%d\n", soff(dm_ssbr));
    printf("\tdef\tDM_REG_SXIP,%d\n", soff(dm_sxip));
    printf("\tdef\tDM_REG_SNIP,%d\n", soff(dm_snip));
    printf("\tdef\tDM_REG_SFIP,%d\n", soff(dm_sfip));
    printf("\tdef\tDM_REG_VBR,%d\n", soff(dm_vbr));
d34 3
a36 3
    printf("\tdef\tDM_REG_DMT0,%d\n", soff(dm_dmt0));
    printf("\tdef\tDM_REG_DMA0,%d\n", soff(dm_dma0));
    printf("\tdef\tDM_REG_DMD0,%d\n", soff(dm_dmd0));
d38 3
a40 3
    printf("\tdef\tDM_REG_DMT1,%d\n", soff(dm_dmt1));
    printf("\tdef\tDM_REG_DMA1,%d\n", soff(dm_dma1));
    printf("\tdef\tDM_REG_DMD1,%d\n", soff(dm_dmd1));
d42 3
a44 3
    printf("\tdef\tDM_REG_DMT2,%d\n", soff(dm_dmt2));
    printf("\tdef\tDM_REG_DMA2,%d\n", soff(dm_dma2));
    printf("\tdef\tDM_REG_DMD2,%d\n", soff(dm_dmd2));
d46 4
a49 4
    printf("\tdef\tDM_REG_SR0,%d\n", soff(dm_sr0));
    printf("\tdef\tDM_REG_SR1,%d\n", soff(dm_sr1));
    printf("\tdef\tDM_REG_SR2,%d\n", soff(dm_sr2));
    printf("\tdef\tDM_REG_SR3,%d\n", soff(dm_sr3));
d51 5
a55 5
    printf("\tdef\tDM_REG_FPECR,%d\n", soff(dm_ip));
    printf("\tdef\tDM_REG_FPHS1,%d\n", soff(dm_fphs1));
    printf("\tdef\tDM_REG_FPLS1,%d\n", soff(dm_fpls1));
    printf("\tdef\tDM_REG_FPHS2,%d\n", soff(dm_fphs2));
    printf("\tdef\tDM_REG_FPLS2,%d\n", soff(dm_fpls2));
d57 10
a66 10
    printf("\tdef\tDM_REG_FPPT,%d\n", soff(dm_fppt));
    printf("\tdef\tDM_REG_FPRH,%d\n", soff(dm_fprh));
    printf("\tdef\tDM_REG_FPRL,%d\n", soff(dm_fprl));
    printf("\tdef\tDM_REG_FPIT,%d\n", soff(dm_fpit));
    printf("\tdef\tDM_REG_FPSR,%d\n", soff(dm_fpsr));
    printf("\tdef\tDM_REG_FPCR,%d\n", soff(dm_fpcr));
    printf("\tdef\tDM_REG_CE_INTR_MSK,%d\n", soff(dm_ce_intr_msk));
    printf("\tdef\tDM_EXCEPTION_CODE,%d\n", soff(dm_exception_code));
    printf("\tdef\tDM_IN_MON,%d\n", soff(dm_in_mon));
    printf("\tdef\tDM_DACC_ADDRESS,%d\n", soff(dm_dacc_address));
@


1.2
log
@Added generation of a 'def' for the offset of the last-dacc-in-monitor
address.
@
text
@d1 2
d4 3
@


1.1
log
@Initial revision
@
text
@d61 1
@
