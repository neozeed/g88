head     1.13;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.13
date     90.08.02.12.20.13;  author robertb;  state Exp;
branches ;
next     1.12;

1.12
date     90.04.29.19.21.24;  author robertb;  state Exp;
branches ;
next     1.11;

1.11
date     89.08.04.20.03.10;  author robertb;  state Exp;
branches ;
next     1.10;

1.10
date     88.09.20.16.59.35;  author robertb;  state Exp;
branches ;
next     1.9;

1.9
date     88.07.13.21.39.51;  author robertb;  state Exp;
branches ;
next     1.8;

1.8
date     88.06.30.15.47.37;  author robertb;  state Exp;
branches ;
next     1.7;

1.7
date     88.06.07.17.08.57;  author robertb;  state Exp;
branches ;
next     1.6;

1.6
date     88.05.06.10.39.35;  author robertb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.28.11.51.30;  author robertb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.13.18.00.53;  author robertb;  state Exp;
branches ;
next     1.3;

1.3
date     88.03.30.18.51.42;  author robertb;  state Exp;
branches ;
next     1.2;

1.2
date     88.03.19.10.21.05;  author robertb;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.25.13.51.47;  author robertb;  state Exp;
branches ;
next     ;


desc
@
@


1.13
log
@Made it understand both new and old opcodes for mul, div, divu, and cmp.
@
text
@
/*
 * This disassembles the passed M88000 instruction and prints it to the
 * standard output.

 * "$Header: /home/bigbird/Usr.U6/robertb/gdb/sim/RCS/simdisasm.c,v 1.12 90/04/29 19:21:24 robertb Exp $";
 */

#include <stdio.h>

#include "fields88.h"
#include "disasm.h"
#include "format.h"

#define AD (1)

#define pr_dest(i)  {add_to_buf("r%d,", D(i));}
#define pr_s1(i)    {add_to_buf("r%d,", S1(i));}
#define pr_s1_no_comma(i) {add_to_buf("r%d", S1(i));}
#define pr_s2(i)    {add_to_buf("r%d", S2(i));}
#define pr_b5(i)    {add_to_buf("%d,", B5(i));}
#define pr_w5(i)    {add_to_buf("%d", W5(i));}
#define pr_o5(i)    {add_to_buf("<%d>", O5(i));}
#define pr_lit16(i) {add_to_buf("0x%x", LIT16(i));}
#define pr_offset(i) {add_to_buf("0x%x", OFFSET(i));}
#define pr_nm(s)    {add_to_buf("%-9s  ", (s));}
#define pr_fcrs(i)  {add_to_buf("fpcr%d", FCRS(i));}
#define pr_index(i) {add_to_buf("[r%d]", S2(i));}
#define pr_crs(i)   {add_to_buf("cr%d", CRS(i));}
#define pr_vec(i)   {add_to_buf("vector_%d", VEC(i));}
#define pr_sfu(i)   {if (SFU(i) > 0) {add_to_buf("  SFU_%d", SFU(i));}}
static
char *bit_branch_table[] = {
  "", "", "eq", "ne", "gt", "le", "lt", "ge", "hi", "ls", "lo", "hs"};

static
struct instr in_tab[] = {
0x70000000, 0xfc000000, 0, "add",      INTRL,       ONEREG,
0xf4007000, 0xfc00ffe0, 0, "add",      INTRR,       ONEREG,
0xf4007100, 0xfc00ffe0, 0, "add.co",   INTRR,       ONEREG,
0xf4007200, 0xfc00ffe0, 0, "add.ci",   INTRR,       ONEREG,
0xf4007300, 0xfc00ffe0, 0, "add.cio",  INTRR,       ONEREG,

0x60000000, 0xfc000000, 0, "addu",     INTRL,       ONEREG,
0xf4006000, 0xfc00ffe0, 0, "addu",     INTRR,       ONEREG,
0xf4006100, 0xfc00ffe0, 0, "addu.co",  INTRR,       ONEREG,
0xf4006200, 0xfc00ffe0, 0, "addu.ci",  INTRR,       ONEREG,
0xf4006300, 0xfc00ffe0, 0, "addu.cio", INTRR,       ONEREG,

0x40000000, 0xfc000000, 0, "and",      INTRL,       ONEREG,
0x44000000, 0xfc000000, 0, "and.u",    INTRL,       ONEREG,
0xf4004000, 0xfc00ffe0, 0, "and",      INTRR,       ONEREG,
0xf4004400, 0xfc00ffe0, 0, "and.c",    INTRR,       ONEREG,

0xe8000000, 0xfc000000, 0, "bcnd",     CBRANCH, NOREG,
0xec000000, 0xfc000000, 0, "bcnd.n",   CBRANCH, NOREG,

0xc0000000, 0xfc000000, 0, "br",       IPREL,       NOREG,
0xc4000000, 0xfc000000, 0, "br.n",     IPREL,       NOREG,

0xd0000000, 0xfc000000, 0, "bb0",      BITBRANCH,   NOREG,
0xd4000000, 0xfc000000, 0, "bb0.n",    BITBRANCH,   NOREG,

0xd8000000, 0xfc000000, 0, "bb1",      BITBRANCH,   NOREG,
0xdc000000, 0xfc000000, 0, "bb1.n",    BITBRANCH,   NOREG,

0xc8000000, 0xfc000000, 0, "bsr",      IPREL,       NOREG,
0xcc000000, 0xfc000000, 0, "bsr.n",    IPREL,       NOREG,

0xf0008000, 0xfc00fc00, 0, "clr",      BITFIELD,    ONEREG,
0xf4008000, 0xfc00ffe0, 0, "clr",      INTRR,       ONEREG,

0x7c000000, 0xfc000000, 0, "cmp",       INTRL,      ONEREG,
0xf4007c00, 0xfc00fee0, 0, "cmp",      INTRR,       ONEREG,

0x78000000, 0xfc000000, 0, "div",       INTRL,      ONEREG,
0xf4007800, 0xfc00fee0, 0, "div",       INTRR,      ONEREG,

0x68000000, 0xfc000000, 0, "divu",      INTRL,      ONEREG,
0xf4006800, 0xfc00fee0, 0, "divu",      INTRR,      ONEREG,

0xf0009000, 0xfc00fc00, 0, "ext",       BITFIELD,   ONEREG,
0xf4009000, 0xfc00ffe0, 0, "ext",       INTRR,      ONEREG,

0xf0009800, 0xfc00fc00, 0, "extu",      BITFIELD,   ONEREG,
0xf4009800, 0xfc00ffe0, 0, "extu",      INTRR,      ONEREG,

0x84002800, 0xfc00ffe0, 0, "fadd.sss",  INTRR,      ONEREG,
0x84002880, 0xfc00ffe0, 0, "fadd.ssd",  INTRR,      ONEREG,
0x84002a00, 0xfc00ffe0, 0, "fadd.sds",  INTRR,      ONEREG,
0x84002a80, 0xfc00ffe0, 0, "fadd.sdd",  INTRR,      ONEREG,
0x84002820, 0xfc00ffe0, 0, "fadd.dss",  INTRR,      TWOREG,
0x840028a0, 0xfc00ffe0, 0, "fadd.dsd",  INTRR,      TWOREG,
0x84002a20, 0xfc00ffe0, 0, "fadd.dds",  INTRR,      TWOREG,
0x84002aa0, 0xfc00ffe0, 0, "fadd.ddd",  INTRR,      TWOREG,

0x84003800, 0xfc00ffe0, 0, "fcmp.sss",  INTRR,      ONEREG,
0x84003880, 0xfc00ffe0, 0, "fcmp.ssd",  INTRR,      ONEREG,
0x84003a20, 0xfc00ffe0, 0, "fcmp.sds",  INTRR,      ONEREG,
0x84003a80, 0xfc00ffe0, 0, "fcmp.sdd",  INTRR,      ONEREG,

0x84007000, 0xfc00ffe0, 0, "fdiv.sss",  INTRR,      ONEREG,
0x84007080, 0xfc00ffe0, 0, "fdiv.ssd",  INTRR,      ONEREG,
0x84007200, 0xfc00ffe0, 0, "fdiv.sds",  INTRR,      ONEREG,
0x84007280, 0xfc00ffe0, 0, "fdiv.sdd",  INTRR,      ONEREG,
0x84007020, 0xfc00ffe0, 0, "fdiv.dss",  INTRR,      TWOREG,
0x840070a0, 0xfc00ffe0, 0, "fdiv.dsd",  INTRR,      TWOREG,
0x84007220, 0xfc00ffe0, 0, "fdiv.dds",  INTRR,      TWOREG,
0x840072a0, 0xfc00ffe0, 0, "fdiv.ddd",  INTRR,      TWOREG,

0xf400ec00, 0xfc1fffe0, 0, "ff0",       INTRR2OP,   ONEREG,
0xf400e800, 0xfc1fffe0, 0, "ff1",       INTRR2OP,   ONEREG,

0x80004800, 0xfc1ff81f, 0, "fldcr", FLDCR,      ONEREG,

0x84002000, 0xfc1fffe0, 0, "flt.ss",    INTRR2OP,   ONEREG,
0x84002020, 0xfc1fffe0, 0, "flt.ds",    INTRR2OP,   TWOREG,

0x84000000, 0xfc00ffe0, 0, "fmul.sss",  INTRR,      ONEREG,
0x84000080, 0xfc00ffe0, 0, "fmul.ssd",  INTRR,      ONEREG,
0x84000200, 0xfc00ffe0, 0, "fmul.sds",  INTRR,      ONEREG,
0x84000280, 0xfc00ffe0, 0, "fmul.sdd",  INTRR,      ONEREG,
0x84000020, 0xfc00ffe0, 0, "fmul.dss",  INTRR,      TWOREG,
0x840000a0, 0xfc00ffe0, 0, "fmul.dsd",  INTRR,      TWOREG,
0x84000220, 0xfc00ffe0, 0, "fmul.dds",  INTRR,      TWOREG,
0x840002a0, 0xfc00ffe0, 0, "fmul.ddd",  INTRR,      TWOREG,

0x80008800, 0xffe0f800, 0, "fstcr", FSTCR,      NOREG,

0x84003000, 0xfc00ffe0, 0, "fsub.sss",  INTRR,      ONEREG,
0x84003080, 0xfc00ffe0, 0, "fsub.ssd",  INTRR,      ONEREG,
0x84003200, 0xfc00ffe0, 0, "fsub.sds",  INTRR,      ONEREG,
0x84003280, 0xfc00ffe0, 0, "fsub.sdd",  INTRR,      ONEREG,
0x84003020, 0xfc00ffe0, 0, "fsub.dss",  INTRR,      TWOREG,
0x840030a0, 0xfc00ffe0, 0, "fsub.dsd",  INTRR,      TWOREG,
0x84003220, 0xfc00ffe0, 0, "fsub.dds",  INTRR,      TWOREG,
0x840032a0, 0xfc00ffe0, 0, "fsub.ddd",  INTRR,      TWOREG,

0x8000c800, 0xfc00f800, 0, "fxcr",      FXCR,       ONEREG,

0x84004800, 0xfc1fffe0, 0, "int.ss",    INTRR2OP,   ONEREG,
0x84004880, 0xfc1fffe0, 0, "int.sd",    INTRR2OP,   ONEREG,

0xf400c000, 0xffffffe0, 0, "jmp",       JMP,        NOREG,
0xf400c400, 0xffffffe0, 0, "jmp.n", JMP,        NOREG,

0xf400c800, 0xffffffe0, 0, "jsr",       JMP,        NOREG,
0xf400cc00, 0xffffffe0, 0, "jsr.n", JMP,        NOREG,

0x10000000, 0xfc000000, 0, "ld.d",      LDLIT,      TWOREG,
0x14000000, 0xfc000000, 0, "ld",        LDLIT,      ONEREG,
0x18000000, 0xfc000000, 0, "ld.h",      LDLIT,      ONEREG,
0x1c000000, 0xfc000000, 0, "ld.b",      LDLIT,      ONEREG,
0x00000000, 0xfc000000, 0, "xmem.bu",   LDLIT,      ONEREG,
0x04000000, 0xfc000000, 0, "xmem",      LDLIT,      ONEREG,
0x08000000, 0xfc000000, 0, "ld.hu", LDLIT,      ONEREG,
0x0c000000, 0xfc000000, 0, "ld.bu", LDLIT,      ONEREG,

0xf4000000, 0xfc00ffe0, 0, "xmem.bu",   LDRO,       ONEREG,
0xf4000400, 0xfc00ffe0, 0, "xmem",      LDRO,       ONEREG,
0xf4000800, 0xfc00ffe0, 0, "ld.hu", LDRO,       ONEREG,
0xf4000c00, 0xfc00ffe0, 0, "ld.bu", LDRO,       ONEREG,
0xf4001000, 0xfc00ffe0, 0, "ld.d",      LDRO,       TWOREG,
0xf4001400, 0xfc00ffe0, 0, "ld",        LDRO,       ONEREG,
0xf4001800, 0xfc00ffe0, 0, "ld.h",      LDRO,       ONEREG,
0xf4001c00, 0xfc00ffe0, 0, "ld.b",      LDRO,       ONEREG,

0xf4000200, 0xfc00ffe0, 0, "xmem.bu",   LDRI,       ONEREG,
0xf4000600, 0xfc00ffe0, 0, "xmem",      LDRI,       ONEREG,
0xf4000a00, 0xfc00ffe0, 0, "ld.hu", LDRI,       ONEREG,
0xf4000e00, 0xfc00ffe0, 0, "ld.bu", LDRI,       ONEREG,
0xf4001200, 0xfc00ffe0, 0, "ld.d",      LDRI,       TWOREG,
0xf4001600, 0xfc00ffe0, 0, "ld",        LDRI,       ONEREG,
0xf4001a00, 0xfc00ffe0, 0, "ld.h",      LDRI,       ONEREG,
0xf4001e00, 0xfc00ffe0, 0, "ld.b",      LDRI,       ONEREG,

0xf4000900, 0xfc00ffe0, 0, "ld.hu.usr", LDRO,       ONEREG,
0xf4000d00, 0xfc00ffe0, 0, "ld.bu.usr", LDRO,       ONEREG,
0xf4001100, 0xfc00ffe0, 0, "ld.d.usr",      LDRO,       TWOREG,
0xf4001500, 0xfc00ffe0, 0, "ld.usr",        LDRO,       ONEREG,
0xf4001900, 0xfc00ffe0, 0, "ld.h.usr",      LDRO,       ONEREG,
0xf4001d00, 0xfc00ffe0, 0, "ld.b.usr",      LDRO,       ONEREG,

0xf4000b00, 0xfc00ffe0, 0, "ld.hu.usr", LDRI,       ONEREG,
0xf4000f00, 0xfc00ffe0, 0, "ld.bu.usr", LDRI,       ONEREG,
0xf4001300, 0xfc00ffe0, 0, "ld.d.usr",      LDRI,       TWOREG,
0xf4001700, 0xfc00ffe0, 0, "ld.usr",        LDRI,       ONEREG,
0xf4001b00, 0xfc00ffe0, 0, "ld.h.usr",      LDRI,       ONEREG,
0xf4001f00, 0xfc00ffe0, 0, "ld.b.usr",      LDRI,       ONEREG,

0xf4000100, 0xfc00ffe0, 0, "xmem.bu.usr",   LDRO,       ONEREG,
0xf4000500, 0xfc00ffe0, 0, "xmem.usr",      LDRO,       ONEREG,
0xf4000300, 0xfc00ffe0, 0, "xmem.bu.usr",   LDRI,       ONEREG,
0xf4000700, 0xfc00ffe0, 0, "xmem.usr",      LDRI,       ONEREG,

/*
 * This is my closest guess on the lda LDLIT and LDRO
 * modes, they aren't documented.
 */
0x30000000, 0xfc000000, 0, "lda.d", LDLIT,      ONEREG,
0x34000000, 0xfc000000, 0, "lda",       LDLIT,      ONEREG,
0x38000000, 0xfc000000, 0, "lda.h", LDLIT,      ONEREG,
0x3c000000, 0xfc000000, 0, "lda.b", LDLIT,      ONEREG,

0xf4003000, 0xfc00ffe0, 0, "lda.d", LDRO,       ONEREG,
0xf4003400, 0xfc00ffe0, 0, "lda",       LDRO,       ONEREG,
0xf4003800, 0xfc00ffe0, 0, "lda.h", LDRO,       ONEREG,
0xf4003c00, 0xfc00ffe0, 0, "lda.b", LDRO,       ONEREG,

0xf4003200, 0xfc00ffe0, 0, "lda.d", LDRI,       ONEREG,
0xf4003600, 0xfc00ffe0, 0, "lda",       LDRI,       ONEREG,
0xf4003a00, 0xfc00ffe0, 0, "lda.h", LDRI,       ONEREG,
0xf4003e00, 0xfc00ffe0, 0, "lda.b", LDRI,       ONEREG,

0x80004000, 0xfc1ff81f, 0, "ldcr",      LDCR,       ONEREG,

0xf000a000, 0xfc00fc00, 0, "mak",       BITFIELD,   ONEREG,
0xf400a000, 0xfc00ffe0, 0, "mak",       INTRR,      ONEREG,

0x48000000, 0xfc000000, 0, "mask",      INTRL,      ONEREG,
0x4c000000, 0xfc000000, 0, "mask.u",    INTRL,      ONEREG,

0x6c000000, 0xfc000000, 0, "mul",       INTRL,      ONEREG,
0xf4006c00, 0xfc00fee0, 0, "mul",       INTRR,      ONEREG,

0x84005000, 0xfc1fffe0, 0, "nint.ss",   INTRR2OP,   ONEREG,
0x84005080, 0xfc1fffe0, 0, "nint.sd",   INTRR2OP,   ONEREG,

0x58000000, 0xfc000000, 0, "or",        INTRL,      ONEREG,
0x5c000000, 0xfc000000, 0, "or.u",      INTRL,      ONEREG,
0xf4005800, 0xfc00ffe0, 0, "or",        INTRR,      ONEREG,
0xf4005c00, 0xfc00ffe0, 0, "or.c",      INTRR,      ONEREG,

0xf000a800, 0xfc00ffe0, 0, "rot",       ROT,        ONEREG,
0xf400a800, 0xfc00ffe0, 0, "rot",       INTRR,      ONEREG,

0xf400fc00, 0xffffffff, 0, "rte",       RTE,        NOREG,

0xf0008800, 0xfc00fc00, 0, "set",      BITFIELD,    ONEREG,
0xf4008800, 0xfc00ffe0, 0, "set",      INTRR,       ONEREG,

0x20000000, 0xfc000000, 0, "st.d",      STLIT,      NOREG,
0x24000000, 0xfc000000, 0, "st",        STLIT,      NOREG,
0x28000000, 0xfc000000, 0, "st.h",      STLIT,      NOREG,
0x2c000000, 0xfc000000, 0, "st.b",      STLIT,      NOREG,

0xf4002000, 0xfc00ffe0, 0, "st.d",      STRO,       NOREG,
0xf4002400, 0xfc00ffe0, 0, "st",        STRO,       NOREG,
0xf4002800, 0xfc00ffe0, 0, "st.h",      STRO,       NOREG,
0xf4002c00, 0xfc00ffe0, 0, "st.b",      STRO,       NOREG,

0xf4002200, 0xfc00ffe0, 0, "st.d",      STRI,       NOREG,
0xf4002600, 0xfc00ffe0, 0, "st",        STRI,       NOREG,
0xf4002a00, 0xfc00ffe0, 0, "st.h",      STRI,       NOREG,
0xf4002e00, 0xfc00ffe0, 0, "st.b",      STRI,       NOREG,

0xf4002100, 0xfc00ffe0, 0, "st.d.usr",      STRO,       NOREG,
0xf4002500, 0xfc00ffe0, 0, "st.usr",        STRO,       NOREG,
0xf4002900, 0xfc00ffe0, 0, "st.h.usr",      STRO,       NOREG,
0xf4002d00, 0xfc00ffe0, 0, "st.b.usr",      STRO,       NOREG,

0xf4002300, 0xfc00ffe0, 0, "st.d.usr",      STRI,       NOREG,
0xf4002700, 0xfc00ffe0, 0, "st.usr",        STRI,       NOREG,
0xf4002b00, 0xfc00ffe0, 0, "st.h.usr",      STRI,       NOREG,
0xf4002f00, 0xfc00ffe0, 0, "st.b.usr",      STRI,       NOREG,

0x80008000, 0xffe0f800, 0, "stcr",      STCR,       NOREG,

0x74000000, 0xfc000000, 0, "sub",       INTRL,      ONEREG,
0xf4007400, 0xfc00ffe0, 0, "sub",       INTRR,      ONEREG,
0xf4007500, 0xfc00ffe0, 0, "sub.bo",    INTRR,      ONEREG,
0xf4007600, 0xfc00ffe0, 0, "sub.bi",    INTRR,      ONEREG,
0xf4007700, 0xfc00ffe0, 0, "sub.bio",   INTRR,      ONEREG,

0x64000000, 0xfc000000, 0, "subu",      INTRL,      ONEREG,
0xf4006400, 0xfc00ffe0, 0, "subu",      INTRR,      ONEREG,
0xf4006500, 0xfc00ffe0, 0, "subu.bo",   INTRR,      ONEREG,
0xf4006600, 0xfc00ffe0, 0, "subu.bi",   INTRR,      ONEREG,
0xf4006700, 0xfc00ffe0, 0, "subu.bio",  INTRR,      ONEREG,

0xf000d000, 0xfc00fe00, 0, "tb0",       TRAP,       NOREG,
0xf000d800, 0xfc00fe00, 0, "tb1",       TRAP,       NOREG,

0xf8000000, 0xffe00000, 0, "tbnd",      TBND,       NOREG,
0xf400f800, 0xffe0ffe0, 0, "tbnd",      INTRR_S1_S2,    NOREG,

0xf000e800, 0xfc00fe00, 0, "tcnd",      TCND,       NOREG,
/*
 * Manual does not describe the encoding for the .n form
 */
0xf000e800, 0xfc00fe00, 0, "tcnd.n",    TCND,       NOREG,

0x84005800, 0xfc1fffe0, 0, "trnc.ss",   INTRR2OP,   ONEREG,
0x84005880, 0xfc1fffe0, 0, "trnc.sd",   INTRR2OP,   ONEREG,

0x8000c000, 0xfc00c000, 0, "xcr",       XCR,        ONEREG,

0x50000000, 0xfc000000, 0, "xor",       INTRL,      ONEREG,
0x54000000, 0xfc000000, 0, "xor.u", INTRL,      ONEREG,
0xf4005000, 0xfc00ffe0, 0, "xor",       INTRR,      ONEREG,
0xf4005400, 0xfc00ffe0, 0, "xor.c", INTRR,      ONEREG,
};

#define INTAB_SIZE (sizeof(in_tab) / sizeof(struct instr))

static
char *dis_buf;

static struct instr *last_p = &(in_tab[INTAB_SIZE]);

#define DECODECACHESIZE  (64)
#define DECODECACHESHIFT (32 - 6)       /* 32 - log2(DECODECACHESIZE) */
static struct instr decodecache[DECODECACHESIZE];

/*
 * This builds a small lookup table based on the top 6 bits of the
 * instruction.  We use it to speed up sim_instructions_lookup().
 */
static
builddecodetable()
{
    register struct instr *p;
    register struct instr *lp = last_p;
    register i;
    static int initialized = 0;

    if (!initialized) {
        initialized = 1;
        for (p = &in_tab[0] ; p < lp ; p++) {
            i = p->opcode >> DECODECACHESHIFT;
            p->link = decodecache[i].link;
            decodecache[i].link = p;
        }
    }
}

/*
 * This returns a pointer to the instruction table entry that matches
 * the passed instruction.
 */
struct instr *
instruction_lookup(i)
    register unsigned i;
{
    register struct instr *p, *prev, *head;
    register struct instr *lp = last_p;
    register int cnt;
    static initialized = 0;

    if (!initialized) {
        builddecodetable();
        initialized = 1;
    }

    prev = head = &decodecache[i >> DECODECACHESHIFT];
    for (p = head->link ; p ; prev = p, p = p->link) {
        if ((p->opmask & i) == p->opcode) {
            /*
             * We do a little adaptive searching here: when
             * we find an instruction we put it at the head of
             * the list.
             */
            prev->link = p->link;
            p->link = head->link;
            head->link = p;
            return p;
        }
    }
    return (struct instr *)0;
}

print_instruction(buf, i, dot)
    char    *buf;
    unsigned int    i;
{
    struct instr *p;

    dis_buf = buf;
    buf[0] = '\0';
    if (p = instruction_lookup(i)) {
        pr_nm(p->mnemonic);
        pr_operands(i, p, dot);
        return;
    }
    add_to_buf("garbage: 0x%x", i);
}

/*
 * This prints the operands.
 */
static
pr_operands(i, p, dot)
    unsigned i;
    struct instr *p;
{
    switch (p->format) {
        case INTRL:
            pr_dest(i);
            pr_s1(i);
            pr_lit16(i);
            break;

        case INTRR:
            pr_dest(i);
            pr_s1(i);
            pr_s2(i);
            break;

        case CBRANCH:
            pr_cond(i);
            pr_s1(i);
            pr_rel16(i, dot);
            break;

        case IPREL:
            pr_rel26(i, dot);
            break;

        case BITBRANCH:
            { int bit_number = B5(i);

                pr_b5(i);
                pr_s1(i);
                pr_rel16(i, dot);

                if (bit_number > 1 && bit_number < 12) {
                    add_to_buf(" %s", bit_branch_table[bit_number]);
                }
            }
            break;

        case BITFIELD:
            pr_dest(i);
            pr_s1(i);
            pr_w5(i);
            pr_o5(i);
            break;

        case INTRR2OP:
            pr_dest(i);
            pr_s2(i);
            break;

        case FLDCR:
            pr_dest(i);
            pr_fcrs(i);
            break;

        case FSTCR:
            pr_s1(i);
            pr_fcrs(i);
            if (S1(i) != S2(i)) {
                add_to_buf("WARNING:  S1=0x%x  S2=0x%x", S1(i), S2(i));
            }
            break;

        case FXCR:
            pr_dest(i);
            pr_s1(i);
            pr_fcrs(i);
            if (S1(i) != S2(i)) {
                add_to_buf("WARNING:  S1=0x%x  S2=0x%x", S1(i), S2(i));
            }
            break;

        case JMP:
            pr_s2(i);
            break;

        case LDLIT: case STLIT:
            pr_dest(i);
            pr_s1(i);
            pr_lit16(i);
            break;

        case LDRO: case STRO:
            pr_dest(i);
            pr_s1(i);
            pr_s2(i);
            break;

        case LDRI: case STRI:
            pr_dest(i);
            pr_s1_no_comma(i);
            pr_index(i);
            break;

        case LDCR:
            pr_dest(i);
            pr_crs(i);
            break;

        case STCR:
            pr_s1(i);
            pr_crs(i);
            break;

        case ROT:
            pr_dest(i);
            pr_s1(i);
            pr_o5(i);
            break;

        case RTE:
            break;

        case TRAP:
            pr_b5(i);
            pr_s1(i);
            pr_vec(i);
            break;

        case TBND:
            pr_s1(i);
            pr_lit16(i);
            break;

        case TCND:
            pr_cond(i);
            pr_s1(i);
            pr_vec(i);
            break;

        case XCR:
            pr_dest(i);
            pr_s1(i);
            pr_crs(i);
            add_to_buf("   ");
            pr_sfu(i);
            if (S1(i) != S2(i)) {
                add_to_buf("WARNING:  S1=0x%x  S2=0x%x", S1(i), S2(i));
            }
            break;

        case INTRR_S1_S2:
            pr_s1(i);
            pr_s2(i);
            break;

        default:
            pr_er("unkwown format %d", p->format);
            break;
    }
}

static
pr_cond(i)
    unsigned i;
{
    int c;
    static
    char *condition_table[] = { 
        "cc0", "gt0", "eq0",  "ge0", 
        "cc4", "cc5", "cc6",  "cc7",
        "cc8", "cc9", "cc10", "cc11",
        "lt0", "ne0", "le0",  "cc15"};

    c = CONDITION(i);
    if (c > 15) {
        add_to_buf("condition_error, cc=%d", c);
    } else {
        add_to_buf("%s,", condition_table[c]);
    }
}

/*
 * Error printing routine.
 */
static
pr_er(fmt, a, b, c, d, e, f)
    char    *fmt;
{
    add_to_buf(fmt, a, b, c, d, e, f);
}

/*
 * This is called just like printf.  It converts the passed
 * parameters to string and then concatenates the string
 * with 'buf'.
 */
static
add_to_buf(fmt, a, b, c, d, e, f, g)
    char    *fmt;
{
    char    s[100];

    sprintf(s, fmt, a, b, c, d, e, f, g);
    strcat(dis_buf, s);
}

#ifndef AD
#include "defs.h"
#include "symbols.h"
#include "mappings.h"
#include "runtime.h"
#endif

/*
 * Print the 26-bit relative field of an instruction (always a
 * branch).
 */
static
pr_rel26(i, dot)
    unsigned i, dot;
{
#ifdef AD
    add_to_buf("0x%x", REL26(i) + (int)dot);
#else
    unsigned addr;
    Symbol func;
    String funcname;

    addr = REL26(i) + dot;
    func = whatfunction(addr);
    funcname = symname(func);
    if (strlen(funcname) > 0) {
        add_to_buf("%s", funcname);
        if (codeloc(func) != addr) {
            add_to_buf("+0x%x", addr - codeloc(func));
        }
    } else {
        if (addr >= dot) {
            add_to_buf("+0x%x", addr - dot);
        } else {
            add_to_buf("-0x%x", dot - addr);
        }
    }
#endif
}

/*
 * Print the 16-bit relative field of an instruction (always a
 * branch).
 */
static
pr_rel16(i, dot)
    unsigned i, dot;
{
#ifdef AD
    add_to_buf("0x%x", REL26(i) + (int)dot);
#else
    unsigned addr;
    Symbol func;
    String funcname;

    addr = REL16(i) + dot;
    func = whatfunction(addr);
    funcname = symname(func);
    if (strlen(funcname) > 0) {
        add_to_buf("%s", funcname);
        if (codeloc(func) != addr) {
            add_to_buf("+0x%x", addr - codeloc(func));
        }
    } else {
        if (addr >= dot) {
            add_to_buf("+0x%x", addr - dot);
        } else {
            add_to_buf("-0x%x", dot - addr);
        }
    }
#endif
}
@


1.12
log
@Ported to System V.  Seems to work.
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.11 89/08/04 20:03:10 robertb Exp $";
d74 1
a74 1
0xf4007d00, 0xfc00ffe0, 0, "cmp",      INTRR,       ONEREG,
d77 1
a77 1
0xf4007900, 0xfc00ffe0, 0, "div",       INTRR,      ONEREG,
d80 1
a80 1
0xf4006900, 0xfc00ffe0, 0, "divu",      INTRR,      ONEREG,
d224 1
a224 1
0xf4006d00, 0xfc00ffe0, 0, "mul",       INTRR,      ONEREG,
@


1.11
log
@fixed structure name problem.
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.10 88/09/20 16:59:35 robertb Exp $";
d15 2
d24 2
a25 2
#define pr_lit16(i) {add_to_buf("0x%X", LIT16(i));}
#define pr_offset(i) {add_to_buf("0x%X", OFFSET(i));}
d385 1
a385 1
    add_to_buf("garbage: 0x%X", i);
d453 1
a453 1
                add_to_buf("WARNING:  S1=0x%X  S2=0x%X", S1(i), S2(i));
d462 1
a462 1
                add_to_buf("WARNING:  S1=0x%X  S2=0x%X", S1(i), S2(i));
d531 1
a531 1
                add_to_buf("WARNING:  S1=0x%X  S2=0x%X", S1(i), S2(i));
d541 1
a541 1
            pr_er("unkwown format %D", p->format);
d607 1
a607 1
    add_to_buf("0x%X", REL26(i) + (int)dot);
d619 1
a619 1
            add_to_buf("+0x%X", addr - codeloc(func));
d623 1
a623 1
            add_to_buf("+0x%X", addr - dot);
d625 1
a625 1
            add_to_buf("-0x%X", dot - addr);
d640 1
a640 1
    add_to_buf("0x%X", REL26(i) + (int)dot);
d652 1
a652 1
            add_to_buf("+0x%X", addr - codeloc(func));
d656 1
a656 1
            add_to_buf("+0x%X", addr - dot);
d658 1
a658 1
            add_to_buf("-0x%X", dot - addr);
@


1.10
log
@fixed xcr display
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.9 88/07/13 21:39:51 robertb Exp $";
d307 1
a307 1
static struct instr_into *last_p = &(in_tab[INTAB_SIZE]);
d321 1
a321 1
    register struct instr_into *lp = last_p;
d344 1
a344 1
    register struct instr_into *lp = last_p;
@


1.9
log
@ffixed bugs in disassembly and symbolic display of rel-16 and rel-26
targets (of branches, bsr's, etc)
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.8 88/06/30 15:47:37 robertb Exp $";
a525 1
            pr_s2(i);
d528 3
@


1.8
log
@expanded tabs
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.7 88/06/07 17:08:57 robertb Exp $";
d600 1
d607 1
d611 12
a622 3
    add_to_buf("%s", symname(func));
    if (codeloc(func) != addr) {
        add_to_buf("+0x%X", addr - codeloc(func));
d633 1
d636 1
a636 1
    add_to_buf("0x%X", REL16(i) + (int)dot);
d640 1
d644 12
a655 3
    add_to_buf("%s", symname(func));
    if (codeloc(func) != addr) {
        add_to_buf("+0x%X", addr - codeloc(func));
@


1.7
log
@Added 4 xmem instructions.
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.6 88/05/06 10:39:35 robertb Exp $";
d15 2
a16 2
#define	pr_dest(i)	{add_to_buf("r%d,", D(i));}
#define pr_s1(i)	{add_to_buf("r%d,", S1(i));}
d18 5
a22 5
#define pr_s2(i)	{add_to_buf("r%d", S2(i));}
#define pr_b5(i)	{add_to_buf("%d,", B5(i));}
#define	pr_w5(i)	{add_to_buf("%d", W5(i));}
#define	pr_o5(i)	{add_to_buf("<%d>", O5(i));}
#define pr_lit16(i)	{add_to_buf("0x%X", LIT16(i));}
d24 6
a29 6
#define pr_nm(s)	{add_to_buf("%-9s  ", (s));}
#define	pr_fcrs(i)	{add_to_buf("fpcr%d", FCRS(i));}
#define	pr_index(i)	{add_to_buf("[r%d]", S2(i));}
#define pr_crs(i)	{add_to_buf("cr%d", CRS(i));}
#define	pr_vec(i)	{add_to_buf("vector_%d", VEC(i));}
#define pr_sfu(i)	{if (SFU(i) > 0) {add_to_buf("  SFU_%d", SFU(i));}}
d36 5
a40 5
0x70000000, 0xfc000000, 0, "add",      INTRL,		ONEREG,
0xf4007000, 0xfc00ffe0, 0, "add",      INTRR,		ONEREG,
0xf4007100, 0xfc00ffe0, 0, "add.co",   INTRR,		ONEREG,
0xf4007200, 0xfc00ffe0, 0, "add.ci",   INTRR,		ONEREG,
0xf4007300, 0xfc00ffe0, 0, "add.cio",  INTRR,		ONEREG,
d42 5
a46 5
0x60000000, 0xfc000000, 0, "addu",     INTRL,		ONEREG,
0xf4006000, 0xfc00ffe0, 0, "addu",     INTRR,		ONEREG,
0xf4006100, 0xfc00ffe0, 0, "addu.co",  INTRR,		ONEREG,
0xf4006200, 0xfc00ffe0, 0, "addu.ci",  INTRR,		ONEREG,
0xf4006300, 0xfc00ffe0, 0, "addu.cio", INTRR,		ONEREG,
d48 4
a51 4
0x40000000, 0xfc000000, 0, "and",      INTRL,		ONEREG,
0x44000000, 0xfc000000, 0, "and.u",    INTRL,		ONEREG,
0xf4004000, 0xfc00ffe0, 0, "and",      INTRR,		ONEREG,
0xf4004400, 0xfc00ffe0, 0, "and.c",    INTRR,		ONEREG,
d53 2
a54 2
0xe8000000, 0xfc000000, 0, "bcnd",     CBRANCH,	NOREG,
0xec000000, 0xfc000000, 0, "bcnd.n",   CBRANCH,	NOREG,
d56 2
a57 2
0xc0000000, 0xfc000000, 0, "br",       IPREL,		NOREG,
0xc4000000, 0xfc000000, 0, "br.n",     IPREL,		NOREG,
d59 2
a60 2
0xd0000000, 0xfc000000, 0, "bb0",      BITBRANCH,	NOREG,
0xd4000000, 0xfc000000, 0, "bb0.n",    BITBRANCH,	NOREG,
d62 2
a63 2
0xd8000000, 0xfc000000, 0, "bb1",      BITBRANCH,	NOREG,
0xdc000000, 0xfc000000, 0, "bb1.n",    BITBRANCH,	NOREG,
d65 2
a66 2
0xc8000000, 0xfc000000, 0, "bsr",      IPREL,		NOREG,
0xcc000000, 0xfc000000, 0, "bsr.n",    IPREL,		NOREG,
d68 2
a69 2
0xf0008000, 0xfc00fc00, 0, "clr",      BITFIELD,	ONEREG,
0xf4008000, 0xfc00ffe0, 0, "clr",      INTRR,		ONEREG,
d71 2
a72 2
0x7c000000, 0xfc000000, 0, "cmp",		INTRL,		ONEREG,
0xf4007d00, 0xfc00ffe0, 0, "cmp",      INTRR,		ONEREG,
d74 2
a75 2
0x78000000, 0xfc000000, 0, "div",		INTRL,		ONEREG,
0xf4007900, 0xfc00ffe0, 0, "div",		INTRR,		ONEREG,
d77 2
a78 2
0x68000000, 0xfc000000, 0, "divu",		INTRL,		ONEREG,
0xf4006900, 0xfc00ffe0, 0, "divu",		INTRR,		ONEREG,
d80 2
a81 2
0xf0009000, 0xfc00fc00, 0, "ext",		BITFIELD,	ONEREG,
0xf4009000, 0xfc00ffe0, 0, "ext",		INTRR,		ONEREG,
d83 2
a84 2
0xf0009800, 0xfc00fc00, 0, "extu",		BITFIELD,	ONEREG,
0xf4009800, 0xfc00ffe0, 0, "extu",		INTRR,		ONEREG,
d86 8
a93 8
0x84002800, 0xfc00ffe0, 0, "fadd.sss",	INTRR,		ONEREG,
0x84002880, 0xfc00ffe0, 0, "fadd.ssd",	INTRR,		ONEREG,
0x84002a00, 0xfc00ffe0, 0, "fadd.sds",	INTRR,		ONEREG,
0x84002a80, 0xfc00ffe0, 0, "fadd.sdd",	INTRR,		ONEREG,
0x84002820, 0xfc00ffe0, 0, "fadd.dss",	INTRR,		TWOREG,
0x840028a0, 0xfc00ffe0, 0, "fadd.dsd",	INTRR,		TWOREG,
0x84002a20, 0xfc00ffe0, 0, "fadd.dds",	INTRR,		TWOREG,
0x84002aa0, 0xfc00ffe0, 0, "fadd.ddd",	INTRR,		TWOREG,
d95 4
a98 4
0x84003800, 0xfc00ffe0, 0, "fcmp.sss",	INTRR,		ONEREG,
0x84003880, 0xfc00ffe0, 0, "fcmp.ssd",	INTRR,		ONEREG,
0x84003a20, 0xfc00ffe0, 0, "fcmp.sds",	INTRR,		ONEREG,
0x84003a80, 0xfc00ffe0, 0, "fcmp.sdd",	INTRR,		ONEREG,
d100 8
a107 8
0x84007000, 0xfc00ffe0, 0, "fdiv.sss",	INTRR,		ONEREG,
0x84007080, 0xfc00ffe0, 0, "fdiv.ssd",	INTRR,		ONEREG,
0x84007200, 0xfc00ffe0, 0, "fdiv.sds",	INTRR,		ONEREG,
0x84007280, 0xfc00ffe0, 0, "fdiv.sdd",	INTRR,		ONEREG,
0x84007020, 0xfc00ffe0, 0, "fdiv.dss",	INTRR,		TWOREG,
0x840070a0, 0xfc00ffe0, 0, "fdiv.dsd",	INTRR,		TWOREG,
0x84007220, 0xfc00ffe0, 0, "fdiv.dds",	INTRR,		TWOREG,
0x840072a0, 0xfc00ffe0, 0, "fdiv.ddd",	INTRR,		TWOREG,
d109 2
a110 2
0xf400ec00, 0xfc1fffe0, 0, "ff0",		INTRR2OP,	ONEREG,
0xf400e800, 0xfc1fffe0, 0, "ff1",		INTRR2OP,	ONEREG,
d112 1
a112 1
0x80004800, 0xfc1ff81f, 0, "fldcr",	FLDCR,		ONEREG,
d114 2
a115 2
0x84002000, 0xfc1fffe0, 0, "flt.ss", 	INTRR2OP,	ONEREG,
0x84002020, 0xfc1fffe0, 0, "flt.ds",	INTRR2OP,	TWOREG,
d117 8
a124 8
0x84000000, 0xfc00ffe0, 0, "fmul.sss",	INTRR,		ONEREG,
0x84000080, 0xfc00ffe0, 0, "fmul.ssd",	INTRR,		ONEREG,
0x84000200, 0xfc00ffe0, 0, "fmul.sds",	INTRR,		ONEREG,
0x84000280, 0xfc00ffe0, 0, "fmul.sdd",	INTRR,		ONEREG,
0x84000020, 0xfc00ffe0, 0, "fmul.dss",	INTRR,		TWOREG,
0x840000a0, 0xfc00ffe0, 0, "fmul.dsd",	INTRR,		TWOREG,
0x84000220, 0xfc00ffe0, 0, "fmul.dds",	INTRR,		TWOREG,
0x840002a0, 0xfc00ffe0, 0, "fmul.ddd",	INTRR,		TWOREG,
d126 1
a126 1
0x80008800, 0xffe0f800, 0, "fstcr",	FSTCR,		NOREG,
d128 8
a135 8
0x84003000, 0xfc00ffe0, 0, "fsub.sss",	INTRR,		ONEREG,
0x84003080, 0xfc00ffe0, 0, "fsub.ssd",	INTRR,		ONEREG,
0x84003200, 0xfc00ffe0, 0, "fsub.sds",	INTRR,		ONEREG,
0x84003280, 0xfc00ffe0, 0, "fsub.sdd",	INTRR,		ONEREG,
0x84003020, 0xfc00ffe0, 0, "fsub.dss",	INTRR,		TWOREG,
0x840030a0, 0xfc00ffe0, 0, "fsub.dsd",	INTRR,		TWOREG,
0x84003220, 0xfc00ffe0, 0, "fsub.dds",	INTRR,		TWOREG,
0x840032a0, 0xfc00ffe0, 0, "fsub.ddd",	INTRR,		TWOREG,
d137 1
a137 1
0x8000c800, 0xfc00f800, 0, "fxcr",		FXCR,		ONEREG,
d139 2
a140 2
0x84004800, 0xfc1fffe0, 0, "int.ss", 	INTRR2OP,	ONEREG,
0x84004880, 0xfc1fffe0, 0, "int.sd",	INTRR2OP,	ONEREG,
d142 2
a143 2
0xf400c000, 0xffffffe0, 0, "jmp",		JMP,		NOREG,
0xf400c400, 0xffffffe0, 0, "jmp.n",	JMP,		NOREG,
d145 2
a146 2
0xf400c800, 0xffffffe0, 0, "jsr",		JMP,		NOREG,
0xf400cc00, 0xffffffe0, 0, "jsr.n",	JMP,		NOREG,
d148 8
a155 8
0x10000000, 0xfc000000, 0, "ld.d",		LDLIT,		TWOREG,
0x14000000, 0xfc000000, 0, "ld",		LDLIT,		ONEREG,
0x18000000, 0xfc000000, 0, "ld.h",		LDLIT,		ONEREG,
0x1c000000, 0xfc000000, 0, "ld.b",		LDLIT,		ONEREG,
0x00000000, 0xfc000000, 0, "xmem.bu",	LDLIT,		ONEREG,
0x04000000, 0xfc000000, 0, "xmem",		LDLIT,		ONEREG,
0x08000000, 0xfc000000, 0, "ld.hu",	LDLIT,		ONEREG,
0x0c000000, 0xfc000000, 0, "ld.bu",	LDLIT,		ONEREG,
d157 8
a164 8
0xf4000000, 0xfc00ffe0, 0, "xmem.bu",	LDRO,		ONEREG,
0xf4000400, 0xfc00ffe0, 0, "xmem",		LDRO,		ONEREG,
0xf4000800, 0xfc00ffe0, 0, "ld.hu",	LDRO,		ONEREG,
0xf4000c00, 0xfc00ffe0, 0, "ld.bu",	LDRO,		ONEREG,
0xf4001000, 0xfc00ffe0, 0, "ld.d",		LDRO,		TWOREG,
0xf4001400, 0xfc00ffe0, 0, "ld",		LDRO,		ONEREG,
0xf4001800, 0xfc00ffe0, 0, "ld.h",		LDRO,		ONEREG,
0xf4001c00, 0xfc00ffe0, 0, "ld.b",		LDRO,		ONEREG,
d166 8
a173 8
0xf4000200, 0xfc00ffe0, 0, "xmem.bu",	LDRI,		ONEREG,
0xf4000600, 0xfc00ffe0, 0, "xmem",		LDRI,		ONEREG,
0xf4000a00, 0xfc00ffe0, 0, "ld.hu",	LDRI,		ONEREG,
0xf4000e00, 0xfc00ffe0, 0, "ld.bu",	LDRI,		ONEREG,
0xf4001200, 0xfc00ffe0, 0, "ld.d",		LDRI,		TWOREG,
0xf4001600, 0xfc00ffe0, 0, "ld",		LDRI,		ONEREG,
0xf4001a00, 0xfc00ffe0, 0, "ld.h",		LDRI,		ONEREG,
0xf4001e00, 0xfc00ffe0, 0, "ld.b",		LDRI,		ONEREG,
d175 6
a180 6
0xf4000900, 0xfc00ffe0, 0, "ld.hu.usr",	LDRO,		ONEREG,
0xf4000d00, 0xfc00ffe0, 0, "ld.bu.usr",	LDRO,		ONEREG,
0xf4001100, 0xfc00ffe0, 0, "ld.d.usr",		LDRO,		TWOREG,
0xf4001500, 0xfc00ffe0, 0, "ld.usr",		LDRO,		ONEREG,
0xf4001900, 0xfc00ffe0, 0, "ld.h.usr",		LDRO,		ONEREG,
0xf4001d00, 0xfc00ffe0, 0, "ld.b.usr",		LDRO,		ONEREG,
d182 6
a187 6
0xf4000b00, 0xfc00ffe0, 0, "ld.hu.usr",	LDRI,		ONEREG,
0xf4000f00, 0xfc00ffe0, 0, "ld.bu.usr",	LDRI,		ONEREG,
0xf4001300, 0xfc00ffe0, 0, "ld.d.usr",		LDRI,		TWOREG,
0xf4001700, 0xfc00ffe0, 0, "ld.usr",		LDRI,		ONEREG,
0xf4001b00, 0xfc00ffe0, 0, "ld.h.usr",		LDRI,		ONEREG,
0xf4001f00, 0xfc00ffe0, 0, "ld.b.usr",		LDRI,		ONEREG,
d189 4
a192 4
0xf4000100, 0xfc00ffe0, 0, "xmem.bu.usr",	LDRO,		ONEREG,
0xf4000500, 0xfc00ffe0, 0, "xmem.usr",		LDRO,		ONEREG,
0xf4000300, 0xfc00ffe0, 0, "xmem.bu.usr",	LDRI,		ONEREG,
0xf4000700, 0xfc00ffe0, 0, "xmem.usr",		LDRI,		ONEREG,
d198 4
a201 4
0x30000000, 0xfc000000, 0, "lda.d",	LDLIT,		ONEREG,
0x34000000, 0xfc000000, 0, "lda",		LDLIT,		ONEREG,
0x38000000, 0xfc000000, 0, "lda.h",	LDLIT,		ONEREG,
0x3c000000, 0xfc000000, 0, "lda.b",	LDLIT,		ONEREG,
d203 4
a206 4
0xf4003000, 0xfc00ffe0, 0, "lda.d",	LDRO,		ONEREG,
0xf4003400, 0xfc00ffe0, 0, "lda",		LDRO,		ONEREG,
0xf4003800, 0xfc00ffe0, 0, "lda.h",	LDRO,		ONEREG,
0xf4003c00, 0xfc00ffe0, 0, "lda.b",	LDRO,		ONEREG,
d208 4
a211 4
0xf4003200, 0xfc00ffe0, 0, "lda.d",	LDRI,		ONEREG,
0xf4003600, 0xfc00ffe0, 0, "lda",		LDRI,		ONEREG,
0xf4003a00, 0xfc00ffe0, 0, "lda.h",	LDRI,		ONEREG,
0xf4003e00, 0xfc00ffe0, 0, "lda.b",	LDRI,		ONEREG,
d213 1
a213 1
0x80004000, 0xfc1ff81f, 0, "ldcr",		LDCR,		ONEREG,
d215 2
a216 2
0xf000a000, 0xfc00fc00, 0, "mak",		BITFIELD,	ONEREG,
0xf400a000, 0xfc00ffe0, 0, "mak",		INTRR,		ONEREG,
d218 2
a219 2
0x48000000, 0xfc000000, 0, "mask",		INTRL,		ONEREG,
0x4c000000, 0xfc000000, 0, "mask.u",	INTRL,		ONEREG,
d221 2
a222 2
0x6c000000, 0xfc000000, 0, "mul",		INTRL,		ONEREG,
0xf4006d00, 0xfc00ffe0, 0, "mul",		INTRR,		ONEREG,
d224 2
a225 2
0x84005000, 0xfc1fffe0, 0, "nint.ss",	INTRR2OP,	ONEREG,
0x84005080, 0xfc1fffe0, 0, "nint.sd",	INTRR2OP,	ONEREG,
d227 4
a230 4
0x58000000, 0xfc000000, 0, "or",		INTRL,		ONEREG,
0x5c000000, 0xfc000000, 0, "or.u",		INTRL,		ONEREG,
0xf4005800, 0xfc00ffe0, 0, "or",		INTRR,		ONEREG,
0xf4005c00, 0xfc00ffe0, 0, "or.c",		INTRR,		ONEREG,
d232 2
a233 2
0xf000a800, 0xfc00ffe0, 0, "rot",		ROT,		ONEREG,
0xf400a800, 0xfc00ffe0, 0, "rot",		INTRR,		ONEREG,
d235 1
a235 1
0xf400fc00, 0xffffffff, 0, "rte",		RTE,		NOREG,
d237 2
a238 2
0xf0008800, 0xfc00fc00, 0, "set",      BITFIELD,	ONEREG,
0xf4008800, 0xfc00ffe0, 0, "set",      INTRR,		ONEREG,
d240 4
a243 4
0x20000000, 0xfc000000, 0, "st.d",		STLIT,		NOREG,
0x24000000, 0xfc000000, 0, "st",		STLIT,		NOREG,
0x28000000, 0xfc000000, 0, "st.h",		STLIT,		NOREG,
0x2c000000, 0xfc000000, 0, "st.b",		STLIT,		NOREG,
d245 4
a248 4
0xf4002000, 0xfc00ffe0, 0, "st.d",		STRO,		NOREG,
0xf4002400, 0xfc00ffe0, 0, "st",		STRO,		NOREG,
0xf4002800, 0xfc00ffe0, 0, "st.h",		STRO,		NOREG,
0xf4002c00, 0xfc00ffe0, 0, "st.b",		STRO,		NOREG,
d250 4
a253 4
0xf4002200, 0xfc00ffe0, 0, "st.d",		STRI,		NOREG,
0xf4002600, 0xfc00ffe0, 0, "st",		STRI,		NOREG,
0xf4002a00, 0xfc00ffe0, 0, "st.h",		STRI,		NOREG,
0xf4002e00, 0xfc00ffe0, 0, "st.b",		STRI,		NOREG,
d255 4
a258 4
0xf4002100, 0xfc00ffe0, 0, "st.d.usr",		STRO,		NOREG,
0xf4002500, 0xfc00ffe0, 0, "st.usr",		STRO,		NOREG,
0xf4002900, 0xfc00ffe0, 0, "st.h.usr",		STRO,		NOREG,
0xf4002d00, 0xfc00ffe0, 0, "st.b.usr",		STRO,		NOREG,
d260 4
a263 4
0xf4002300, 0xfc00ffe0, 0, "st.d.usr",		STRI,		NOREG,
0xf4002700, 0xfc00ffe0, 0, "st.usr",		STRI,		NOREG,
0xf4002b00, 0xfc00ffe0, 0, "st.h.usr",		STRI,		NOREG,
0xf4002f00, 0xfc00ffe0, 0, "st.b.usr",		STRI,		NOREG,
d265 1
a265 1
0x80008000, 0xffe0f800, 0, "stcr",		STCR,		NOREG,
d267 5
a271 5
0x74000000, 0xfc000000, 0, "sub",		INTRL,		ONEREG,
0xf4007400, 0xfc00ffe0, 0, "sub",		INTRR,		ONEREG,
0xf4007500, 0xfc00ffe0, 0, "sub.bo",	INTRR,		ONEREG,
0xf4007600, 0xfc00ffe0, 0, "sub.bi",	INTRR,		ONEREG,
0xf4007700, 0xfc00ffe0, 0, "sub.bio",	INTRR,		ONEREG,
d273 5
a277 5
0x64000000, 0xfc000000, 0, "subu",		INTRL,		ONEREG,
0xf4006400, 0xfc00ffe0, 0, "subu",		INTRR,		ONEREG,
0xf4006500, 0xfc00ffe0, 0, "subu.bo",	INTRR,		ONEREG,
0xf4006600, 0xfc00ffe0, 0, "subu.bi",	INTRR,		ONEREG,
0xf4006700, 0xfc00ffe0, 0, "subu.bio",	INTRR,		ONEREG,
d279 2
a280 2
0xf000d000, 0xfc00fe00, 0, "tb0",		TRAP,		NOREG,
0xf000d800, 0xfc00fe00, 0, "tb1",		TRAP,		NOREG,
d282 2
a283 2
0xf8000000, 0xffe00000, 0, "tbnd",		TBND,		NOREG,
0xf400f800, 0xffe0ffe0, 0, "tbnd",		INTRR_S1_S2,	NOREG,
d285 1
a285 1
0xf000e800, 0xfc00fe00, 0, "tcnd",		TCND,		NOREG,
d289 1
a289 1
0xf000e800, 0xfc00fe00, 0, "tcnd.n",	TCND,		NOREG,
d291 2
a292 2
0x84005800, 0xfc1fffe0, 0, "trnc.ss",	INTRR2OP,	ONEREG,
0x84005880, 0xfc1fffe0, 0, "trnc.sd",	INTRR2OP,	ONEREG,
d294 1
a294 1
0x8000c000, 0xfc00c000, 0, "xcr",		XCR,		ONEREG,
d296 4
a299 4
0x50000000, 0xfc000000, 0, "xor",		INTRL,		ONEREG,
0x54000000, 0xfc000000, 0, "xor.u",	INTRL,		ONEREG,
0xf4005000, 0xfc00ffe0, 0, "xor",		INTRR,		ONEREG,
0xf4005400, 0xfc00ffe0, 0, "xor.c",	INTRR,		ONEREG,
d371 2
a372 2
	char	*buf;
	unsigned int	i;
d374 1
a374 1
	struct instr *p;
d376 8
a383 8
	dis_buf = buf;
	buf[0] = '\0';
	if (p = instruction_lookup(i)) {
		pr_nm(p->mnemonic);
		pr_operands(i, p, dot);
		return;
	}
	add_to_buf("garbage: 0x%X", i);
d391 2
a392 2
	unsigned i;
	struct instr *p;
d394 6
a399 6
	switch (p->format) {
		case INTRL:
			pr_dest(i);
			pr_s1(i);
			pr_lit16(i);
			break;
d401 5
a405 5
		case INTRR:
			pr_dest(i);
			pr_s1(i);
			pr_s2(i);
			break;
d407 5
a411 5
		case CBRANCH:
			pr_cond(i);
			pr_s1(i);
			pr_rel16(i, dot);
			break;
d413 3
a415 3
		case IPREL:
			pr_rel26(i, dot);
			break;
d417 2
a418 2
		case BITBRANCH:
			{ int bit_number = B5(i);
d420 3
a422 3
				pr_b5(i);
				pr_s1(i);
				pr_rel16(i, dot);
d424 5
a428 5
				if (bit_number > 1 && bit_number < 12) {
					add_to_buf(" %s", bit_branch_table[bit_number]);
				}
			}
			break;
d430 6
a435 6
		case BITFIELD:
			pr_dest(i);
			pr_s1(i);
			pr_w5(i);
			pr_o5(i);
			break;
d437 4
a440 4
		case INTRR2OP:
			pr_dest(i);
			pr_s2(i);
			break;
d442 4
a445 4
		case FLDCR:
			pr_dest(i);
			pr_fcrs(i);
			break;
d447 7
a453 7
		case FSTCR:
			pr_s1(i);
			pr_fcrs(i);
			if (S1(i) != S2(i)) {
				add_to_buf("WARNING:  S1=0x%X  S2=0x%X", S1(i), S2(i));
			}
			break;
d455 8
a462 8
		case FXCR:
			pr_dest(i);
			pr_s1(i);
			pr_fcrs(i);
			if (S1(i) != S2(i)) {
				add_to_buf("WARNING:  S1=0x%X  S2=0x%X", S1(i), S2(i));
			}
			break;
d464 3
a466 3
		case JMP:
			pr_s2(i);
			break;
d468 5
a472 5
		case LDLIT: case STLIT:
			pr_dest(i);
			pr_s1(i);
			pr_lit16(i);
			break;
d474 5
a478 5
		case LDRO: case STRO:
			pr_dest(i);
			pr_s1(i);
			pr_s2(i);
			break;
d480 5
a484 5
		case LDRI: case STRI:
			pr_dest(i);
			pr_s1_no_comma(i);
			pr_index(i);
			break;
d486 4
a489 4
		case LDCR:
			pr_dest(i);
			pr_crs(i);
			break;
d491 4
a494 4
		case STCR:
			pr_s1(i);
			pr_crs(i);
			break;
d496 5
a500 5
		case ROT:
			pr_dest(i);
			pr_s1(i);
			pr_o5(i);
			break;
d502 2
a503 2
		case RTE:
			break;
d505 5
a509 5
		case TRAP:
			pr_b5(i);
			pr_s1(i);
			pr_vec(i);
			break;
d511 4
a514 4
		case TBND:
			pr_s1(i);
			pr_lit16(i);
			break;
d516 5
a520 5
		case TCND:
			pr_cond(i);
			pr_s1(i);
			pr_vec(i);
			break;
d522 8
a529 8
		case XCR:
			pr_dest(i);
			pr_s1(i);
			pr_crs(i);
			pr_s2(i);
			add_to_buf("   ");
			pr_sfu(i);
			break;
d531 4
a534 4
		case INTRR_S1_S2:
			pr_s1(i);
			pr_s2(i);
			break;
d536 4
a539 4
		default:
			pr_er("unkwown format %D", p->format);
			break;
	}
d544 1
a544 1
	unsigned i;
d546 3
a548 3
	int	c;
	static
	char *condition_table[] = { 
d554 6
a559 6
	c = CONDITION(i);
	if (c > 15) {
		add_to_buf("condition_error, cc=%d", c);
	} else {
		add_to_buf("%s,", condition_table[c]);
	}
d567 1
a567 1
	char	*fmt;
d569 1
a569 1
	add_to_buf(fmt, a, b, c, d, e, f);
d579 1
a579 1
	char	*fmt;
d581 1
a581 1
	char	s[100];
d583 2
a584 2
	sprintf(s, fmt, a, b, c, d, e, f, g);
	strcat(dis_buf, s);
d602 1
a602 1
	add_to_buf("0x%X", REL26(i) + (int)dot);
d607 1
a607 1
	addr = REL26(i) + dot;
d611 2
a612 2
		add_to_buf("+0x%X", addr - codeloc(func));
	}
d624 1
a624 1
	add_to_buf("0x%X", REL16(i) + (int)dot);
d629 1
a629 1
	addr = REL16(i) + dot;
d633 2
a634 2
		add_to_buf("+0x%X", addr - codeloc(func));
	}
@


1.6
log
@sped up disassembly by using the simulator's disassembler, which
is pretty fast.
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.5 88/04/28 11:51:30 robertb Exp $";
d188 6
@


1.5
log
@moved rcsid into the header comment.
@
text
@d6 1
a6 1
 * "$Header: disasm.c,v 1.4 88/04/13 18:00:53 robertb Exp $";
d36 5
a40 5
0x70000000, 0xfc000000, "add",      INTRL,		ONEREG,
0xf4007000, 0xfc00ffe0, "add",      INTRR,		ONEREG,
0xf4007100, 0xfc00ffe0, "add.co",   INTRR,		ONEREG,
0xf4007200, 0xfc00ffe0, "add.ci",   INTRR,		ONEREG,
0xf4007300, 0xfc00ffe0, "add.cio",  INTRR,		ONEREG,
d42 5
a46 5
0x60000000, 0xfc000000, "addu",     INTRL,		ONEREG,
0xf4006000, 0xfc00ffe0, "addu",     INTRR,		ONEREG,
0xf4006100, 0xfc00ffe0, "addu.co",  INTRR,		ONEREG,
0xf4006200, 0xfc00ffe0, "addu.ci",  INTRR,		ONEREG,
0xf4006300, 0xfc00ffe0, "addu.cio", INTRR,		ONEREG,
d48 4
a51 4
0x40000000, 0xfc000000, "and",      INTRL,		ONEREG,
0x44000000, 0xfc000000, "and.u",    INTRL,		ONEREG,
0xf4004000, 0xfc00ffe0, "and",      INTRR,		ONEREG,
0xf4004400, 0xfc00ffe0, "and.c",    INTRR,		ONEREG,
d53 2
a54 2
0xe8000000, 0xfc000000, "bcnd",     CBRANCH,	NOREG,
0xec000000, 0xfc000000, "bcnd.n",   CBRANCH,	NOREG,
d56 2
a57 2
0xc0000000, 0xfc000000, "br",       IPREL,		NOREG,
0xc4000000, 0xfc000000, "br.n",     IPREL,		NOREG,
d59 2
a60 2
0xd0000000, 0xfc000000, "bb0",      BITBRANCH,	NOREG,
0xd4000000, 0xfc000000, "bb0.n",    BITBRANCH,	NOREG,
d62 2
a63 2
0xd8000000, 0xfc000000, "bb1",      BITBRANCH,	NOREG,
0xdc000000, 0xfc000000, "bb1.n",    BITBRANCH,	NOREG,
d65 2
a66 2
0xc8000000, 0xfc000000, "bsr",      IPREL,		NOREG,
0xcc000000, 0xfc000000, "bsr.n",    IPREL,		NOREG,
d68 2
a69 2
0xf0008000, 0xfc00fc00, "clr",      BITFIELD,	ONEREG,
0xf4008000, 0xfc00ffe0, "clr",      INTRR,		ONEREG,
d71 2
a72 2
0x7c000000, 0xfc000000, "cmp",		INTRL,		ONEREG,
0xf4007d00, 0xfc00ffe0, "cmp",      INTRR,		ONEREG,
d74 2
a75 2
0x78000000, 0xfc000000, "div",		INTRL,		ONEREG,
0xf4007900, 0xfc00ffe0, "div",		INTRR,		ONEREG,
d77 2
a78 2
0x68000000, 0xfc000000, "divu",		INTRL,		ONEREG,
0xf4006900, 0xfc00ffe0, "divu",		INTRR,		ONEREG,
d80 2
a81 2
0xf0009000, 0xfc00fc00, "ext",		BITFIELD,	ONEREG,
0xf4009000, 0xfc00ffe0, "ext",		INTRR,		ONEREG,
d83 2
a84 2
0xf0009800, 0xfc00fc00, "extu",		BITFIELD,	ONEREG,
0xf4009800, 0xfc00ffe0, "extu",		INTRR,		ONEREG,
d86 8
a93 8
0x84002800, 0xfc00ffe0, "fadd.sss",	INTRR,		ONEREG,
0x84002880, 0xfc00ffe0, "fadd.ssd",	INTRR,		ONEREG,
0x84002a00, 0xfc00ffe0, "fadd.sds",	INTRR,		ONEREG,
0x84002a80, 0xfc00ffe0, "fadd.sdd",	INTRR,		ONEREG,
0x84002820, 0xfc00ffe0, "fadd.dss",	INTRR,		TWOREG,
0x840028a0, 0xfc00ffe0, "fadd.dsd",	INTRR,		TWOREG,
0x84002a20, 0xfc00ffe0, "fadd.dds",	INTRR,		TWOREG,
0x84002aa0, 0xfc00ffe0, "fadd.ddd",	INTRR,		TWOREG,
d95 4
a98 4
0x84003800, 0xfc00ffe0, "fcmp.sss",	INTRR,		ONEREG,
0x84003880, 0xfc00ffe0, "fcmp.ssd",	INTRR,		ONEREG,
0x84003a20, 0xfc00ffe0, "fcmp.sds",	INTRR,		ONEREG,
0x84003a80, 0xfc00ffe0, "fcmp.sdd",	INTRR,		ONEREG,
d100 8
a107 8
0x84007000, 0xfc00ffe0, "fdiv.sss",	INTRR,		ONEREG,
0x84007080, 0xfc00ffe0, "fdiv.ssd",	INTRR,		ONEREG,
0x84007200, 0xfc00ffe0, "fdiv.sds",	INTRR,		ONEREG,
0x84007280, 0xfc00ffe0, "fdiv.sdd",	INTRR,		ONEREG,
0x84007020, 0xfc00ffe0, "fdiv.dss",	INTRR,		TWOREG,
0x840070a0, 0xfc00ffe0, "fdiv.dsd",	INTRR,		TWOREG,
0x84007220, 0xfc00ffe0, "fdiv.dds",	INTRR,		TWOREG,
0x840072a0, 0xfc00ffe0, "fdiv.ddd",	INTRR,		TWOREG,
d109 2
a110 2
0xf400ec00, 0xfc1fffe0, "ff0",		INTRR2OP,	ONEREG,
0xf400e800, 0xfc1fffe0, "ff1",		INTRR2OP,	ONEREG,
d112 1
a112 1
0x80004800, 0xfc1ff81f, "fldcr",	FLDCR,		ONEREG,
d114 2
a115 2
0x84002000, 0xfc1fffe0, "flt.ss", 	INTRR2OP,	ONEREG,
0x84002020, 0xfc1fffe0, "flt.ds",	INTRR2OP,	TWOREG,
d117 8
a124 8
0x84000000, 0xfc00ffe0, "fmul.sss",	INTRR,		ONEREG,
0x84000080, 0xfc00ffe0, "fmul.ssd",	INTRR,		ONEREG,
0x84000200, 0xfc00ffe0, "fmul.sds",	INTRR,		ONEREG,
0x84000280, 0xfc00ffe0, "fmul.sdd",	INTRR,		ONEREG,
0x84000020, 0xfc00ffe0, "fmul.dss",	INTRR,		TWOREG,
0x840000a0, 0xfc00ffe0, "fmul.dsd",	INTRR,		TWOREG,
0x84000220, 0xfc00ffe0, "fmul.dds",	INTRR,		TWOREG,
0x840002a0, 0xfc00ffe0, "fmul.ddd",	INTRR,		TWOREG,
d126 1
a126 1
0x80008800, 0xffe0f800, "fstcr",	FSTCR,		NOREG,
d128 8
a135 8
0x84003000, 0xfc00ffe0, "fsub.sss",	INTRR,		ONEREG,
0x84003080, 0xfc00ffe0, "fsub.ssd",	INTRR,		ONEREG,
0x84003200, 0xfc00ffe0, "fsub.sds",	INTRR,		ONEREG,
0x84003280, 0xfc00ffe0, "fsub.sdd",	INTRR,		ONEREG,
0x84003020, 0xfc00ffe0, "fsub.dss",	INTRR,		TWOREG,
0x840030a0, 0xfc00ffe0, "fsub.dsd",	INTRR,		TWOREG,
0x84003220, 0xfc00ffe0, "fsub.dds",	INTRR,		TWOREG,
0x840032a0, 0xfc00ffe0, "fsub.ddd",	INTRR,		TWOREG,
d137 1
a137 1
0x8000c800, 0xfc00f800, "fxcr",		FXCR,		ONEREG,
d139 2
a140 2
0x84004800, 0xfc1fffe0, "int.ss", 	INTRR2OP,	ONEREG,
0x84004880, 0xfc1fffe0, "int.sd",	INTRR2OP,	ONEREG,
d142 2
a143 2
0xf400c000, 0xffffffe0, "jmp",		JMP,		NOREG,
0xf400c400, 0xffffffe0, "jmp.n",	JMP,		NOREG,
d145 2
a146 2
0xf400c800, 0xffffffe0, "jsr",		JMP,		NOREG,
0xf400cc00, 0xffffffe0, "jsr.n",	JMP,		NOREG,
d148 8
a155 8
0x10000000, 0xfc000000, "ld.d",		LDLIT,		TWOREG,
0x14000000, 0xfc000000, "ld",		LDLIT,		ONEREG,
0x18000000, 0xfc000000, "ld.h",		LDLIT,		ONEREG,
0x1c000000, 0xfc000000, "ld.b",		LDLIT,		ONEREG,
0x00000000, 0xfc000000, "xmem.bu",	LDLIT,		ONEREG,
0x04000000, 0xfc000000, "xmem",		LDLIT,		ONEREG,
0x08000000, 0xfc000000, "ld.hu",	LDLIT,		ONEREG,
0x0c000000, 0xfc000000, "ld.bu",	LDLIT,		ONEREG,
d157 8
a164 8
0xf4000000, 0xfc00ffe0, "xmem.bu",	LDRO,		ONEREG,
0xf4000400, 0xfc00ffe0, "xmem",		LDRO,		ONEREG,
0xf4000800, 0xfc00ffe0, "ld.hu",	LDRO,		ONEREG,
0xf4000c00, 0xfc00ffe0, "ld.bu",	LDRO,		ONEREG,
0xf4001000, 0xfc00ffe0, "ld.d",		LDRO,		TWOREG,
0xf4001400, 0xfc00ffe0, "ld",		LDRO,		ONEREG,
0xf4001800, 0xfc00ffe0, "ld.h",		LDRO,		ONEREG,
0xf4001c00, 0xfc00ffe0, "ld.b",		LDRO,		ONEREG,
d166 8
a173 8
0xf4000200, 0xfc00ffe0, "xmem.bu",	LDRI,		ONEREG,
0xf4000600, 0xfc00ffe0, "xmem",		LDRI,		ONEREG,
0xf4000a00, 0xfc00ffe0, "ld.hu",	LDRI,		ONEREG,
0xf4000e00, 0xfc00ffe0, "ld.bu",	LDRI,		ONEREG,
0xf4001200, 0xfc00ffe0, "ld.d",		LDRI,		TWOREG,
0xf4001600, 0xfc00ffe0, "ld",		LDRI,		ONEREG,
0xf4001a00, 0xfc00ffe0, "ld.h",		LDRI,		ONEREG,
0xf4001e00, 0xfc00ffe0, "ld.b",		LDRI,		ONEREG,
d175 6
a180 6
0xf4000900, 0xfc00ffe0, "ld.hu.usr",	LDRO,		ONEREG,
0xf4000d00, 0xfc00ffe0, "ld.bu.usr",	LDRO,		ONEREG,
0xf4001100, 0xfc00ffe0, "ld.d.usr",		LDRO,		TWOREG,
0xf4001500, 0xfc00ffe0, "ld.usr",		LDRO,		ONEREG,
0xf4001900, 0xfc00ffe0, "ld.h.usr",		LDRO,		ONEREG,
0xf4001d00, 0xfc00ffe0, "ld.b.usr",		LDRO,		ONEREG,
d182 6
a187 6
0xf4000b00, 0xfc00ffe0, "ld.hu.usr",	LDRI,		ONEREG,
0xf4000f00, 0xfc00ffe0, "ld.bu.usr",	LDRI,		ONEREG,
0xf4001300, 0xfc00ffe0, "ld.d.usr",		LDRI,		TWOREG,
0xf4001700, 0xfc00ffe0, "ld.usr",		LDRI,		ONEREG,
0xf4001b00, 0xfc00ffe0, "ld.h.usr",		LDRI,		ONEREG,
0xf4001f00, 0xfc00ffe0, "ld.b.usr",		LDRI,		ONEREG,
d192 4
a195 4
0x30000000, 0xfc000000, "lda.d",	LDLIT,		ONEREG,
0x34000000, 0xfc000000, "lda",		LDLIT,		ONEREG,
0x38000000, 0xfc000000, "lda.h",	LDLIT,		ONEREG,
0x3c000000, 0xfc000000, "lda.b",	LDLIT,		ONEREG,
d197 4
a200 4
0xf4003000, 0xfc00ffe0, "lda.d",	LDRO,		ONEREG,
0xf4003400, 0xfc00ffe0, "lda",		LDRO,		ONEREG,
0xf4003800, 0xfc00ffe0, "lda.h",	LDRO,		ONEREG,
0xf4003c00, 0xfc00ffe0, "lda.b",	LDRO,		ONEREG,
d202 4
a205 4
0xf4003200, 0xfc00ffe0, "lda.d",	LDRI,		ONEREG,
0xf4003600, 0xfc00ffe0, "lda",		LDRI,		ONEREG,
0xf4003a00, 0xfc00ffe0, "lda.h",	LDRI,		ONEREG,
0xf4003e00, 0xfc00ffe0, "lda.b",	LDRI,		ONEREG,
d207 1
a207 1
0x80004000, 0xfc1ff81f, "ldcr",		LDCR,		ONEREG,
d209 2
a210 2
0xf000a000, 0xfc00fc00, "mak",		BITFIELD,	ONEREG,
0xf400a000, 0xfc00ffe0, "mak",		INTRR,		ONEREG,
d212 2
a213 2
0x48000000, 0xfc000000, "mask",		INTRL,		ONEREG,
0x4c000000, 0xfc000000, "mask.u",	INTRL,		ONEREG,
d215 2
a216 2
0x6c000000, 0xfc000000, "mul",		INTRL,		ONEREG,
0xf4006d00, 0xfc00ffe0, "mul",		INTRR,		ONEREG,
d218 2
a219 2
0x84005000, 0xfc1fffe0, "nint.ss",	INTRR2OP,	ONEREG,
0x84005080, 0xfc1fffe0, "nint.sd",	INTRR2OP,	ONEREG,
d221 4
a224 4
0x58000000, 0xfc000000, "or",		INTRL,		ONEREG,
0x5c000000, 0xfc000000, "or.u",		INTRL,		ONEREG,
0xf4005800, 0xfc00ffe0, "or",		INTRR,		ONEREG,
0xf4005c00, 0xfc00ffe0, "or.c",		INTRR,		ONEREG,
d226 2
a227 2
0xf000a800, 0xfc00ffe0, "rot",		ROT,		ONEREG,
0xf400a800, 0xfc00ffe0, "rot",		INTRR,		ONEREG,
d229 1
a229 1
0xf400fc00, 0xffffffff, "rte",		RTE,		NOREG,
d231 2
a232 2
0xf0008800, 0xfc00fc00, "set",      BITFIELD,	ONEREG,
0xf4008800, 0xfc00ffe0, "set",      INTRR,		ONEREG,
d234 4
a237 4
0x20000000, 0xfc000000, "st.d",		STLIT,		NOREG,
0x24000000, 0xfc000000, "st",		STLIT,		NOREG,
0x28000000, 0xfc000000, "st.h",		STLIT,		NOREG,
0x2c000000, 0xfc000000, "st.b",		STLIT,		NOREG,
d239 4
a242 4
0xf4002000, 0xfc00ffe0, "st.d",		STRO,		NOREG,
0xf4002400, 0xfc00ffe0, "st",		STRO,		NOREG,
0xf4002800, 0xfc00ffe0, "st.h",		STRO,		NOREG,
0xf4002c00, 0xfc00ffe0, "st.b",		STRO,		NOREG,
d244 4
a247 4
0xf4002200, 0xfc00ffe0, "st.d",		STRI,		NOREG,
0xf4002600, 0xfc00ffe0, "st",		STRI,		NOREG,
0xf4002a00, 0xfc00ffe0, "st.h",		STRI,		NOREG,
0xf4002e00, 0xfc00ffe0, "st.b",		STRI,		NOREG,
d249 4
a252 4
0xf4002100, 0xfc00ffe0, "st.d.usr",		STRO,		NOREG,
0xf4002500, 0xfc00ffe0, "st.usr",		STRO,		NOREG,
0xf4002900, 0xfc00ffe0, "st.h.usr",		STRO,		NOREG,
0xf4002d00, 0xfc00ffe0, "st.b.usr",		STRO,		NOREG,
d254 4
a257 4
0xf4002300, 0xfc00ffe0, "st.d.usr",		STRI,		NOREG,
0xf4002700, 0xfc00ffe0, "st.usr",		STRI,		NOREG,
0xf4002b00, 0xfc00ffe0, "st.h.usr",		STRI,		NOREG,
0xf4002f00, 0xfc00ffe0, "st.b.usr",		STRI,		NOREG,
d259 1
a259 1
0x80008000, 0xffe0f800, "stcr",		STCR,		NOREG,
d261 5
a265 5
0x74000000, 0xfc000000, "sub",		INTRL,		ONEREG,
0xf4007400, 0xfc00ffe0, "sub",		INTRR,		ONEREG,
0xf4007500, 0xfc00ffe0, "sub.bo",	INTRR,		ONEREG,
0xf4007600, 0xfc00ffe0, "sub.bi",	INTRR,		ONEREG,
0xf4007700, 0xfc00ffe0, "sub.bio",	INTRR,		ONEREG,
d267 5
a271 5
0x64000000, 0xfc000000, "subu",		INTRL,		ONEREG,
0xf4006400, 0xfc00ffe0, "subu",		INTRR,		ONEREG,
0xf4006500, 0xfc00ffe0, "subu.bo",	INTRR,		ONEREG,
0xf4006600, 0xfc00ffe0, "subu.bi",	INTRR,		ONEREG,
0xf4006700, 0xfc00ffe0, "subu.bio",	INTRR,		ONEREG,
d273 2
a274 2
0xf000d000, 0xfc00fe00, "tb0",		TRAP,		NOREG,
0xf000d800, 0xfc00fe00, "tb1",		TRAP,		NOREG,
d276 2
a277 2
0xf8000000, 0xffe00000, "tbnd",		TBND,		NOREG,
0xf400f800, 0xffe0ffe0, "tbnd",		INTRR_S1_S2,	NOREG,
d279 1
a279 1
0xf000e800, 0xfc00fe00, "tcnd",		TCND,		NOREG,
d283 1
a283 1
0xf000e800, 0xfc00fe00, "tcnd.n",	TCND,		NOREG,
d285 2
a286 2
0x84005800, 0xfc1fffe0, "trnc.ss",	INTRR2OP,	ONEREG,
0x84005880, 0xfc1fffe0, "trnc.sd",	INTRR2OP,	ONEREG,
d288 1
a288 1
0x8000c000, 0xfc00c000, "xcr",		XCR,		ONEREG,
d290 4
a293 4
0x50000000, 0xfc000000, "xor",		INTRL,		ONEREG,
0x54000000, 0xfc000000, "xor.u",	INTRL,		ONEREG,
0xf4005000, 0xfc00ffe0, "xor",		INTRR,		ONEREG,
0xf4005400, 0xfc00ffe0, "xor.c",	INTRR,		ONEREG,
d301 6
d308 22
d335 1
a335 1
	unsigned	i;
d337 4
a340 1
	register struct instr *p, *last_instr;
d342 4
a345 1
	last_instr = &in_tab[INTAB_SIZE];
d347 15
a361 6
	for (p = &in_tab[0] ; p < last_instr ; p++) {
		if ((p->opmask & i) == p->opcode) {
			return p;
		}
	}
	return 0;
@


1.4
log
@Made IP-relative instruction disassembly display
branch targets symbolically.
@
text
@d5 2
a8 1
static char rcsid[] = "$Header: disasm.c,v 1.3 88/03/30 18:51:42 robertb Exp $";
@


1.3
log
@changed whatblock() calls to whatfunction()
@
text
@d7 1
a7 1
static char rcsid[] = "$Header: disasm.c,v 1.2 88/03/19 10:21:05 robertb Exp $";
a9 4
#ifdef ADB
#include "defs.h"
#endif

d94 2
a95 2
0x84003820, 0xfc00ffe0, "fcmp.sss",	INTRR,		ONEREG,
0x840038a0, 0xfc00ffe0, "fcmp.ssd",	INTRR,		ONEREG,
d97 1
a97 1
0x84003aa0, 0xfc00ffe0, "fcmp.sdd",	INTRR,		ONEREG,
d114 1
a114 1
0x84002080, 0xfc1fffe0, "flt.ds",	INTRR2OP,	TWOREG,
d537 1
a537 2
#ifdef DBX

d541 2
d551 2
a552 31
	int addr;

	Symbol f;

	addr = REL26(i) + (int)dot;
	f = whatfunction(addr);
	add_to_buf("%s", symname(f));
	if (codeloc(f) != addr) {
		add_to_buf("+0x%X", addr - codeloc(f));
	}
}

/*
 * Print the 16-bit relative field of an instruction (always a
 * branch).
 */
static
pr_rel16(i, dot)
{
	int addr;

	Symbol f;

	addr = REL16(i) + (int)dot;
	f = whatfunction(addr);
	add_to_buf("%s", symname(f));
	if (codeloc(f) != addr) {
		add_to_buf("+0x%X", addr - codeloc(f));
	}
}

d554 2
a555 8
/*
 * Print the 26-bit relative field of an instruction (always a
 * branch).
 */
static
pr_rel26(i, dot)
{
	int d, addr;
a556 1
#ifdef ADB
d558 4
a561 5
	d = findsym(addr, ISYM);
	if (d == 0) {
		add_to_buf("%s", cursym->n_un.n_name);
	} else {
		add_to_buf("0x%X", addr);
a562 10
#else
#ifdef AD
	add_to_buf("0x%X", REL26(i) + (int)dot);
#else
	addr = REL26(i);
	if (addr > 0) {
		add_to_buf("+%d", addr);
	} else {
		add_to_buf("%d", addr);
	}
a563 1
#endif
a572 11
	int d, addr;

#ifdef ADB
	addr = REL16(i) + (int)dot;
	d = findsym(addr, ISYM);
	if (d == 0) {
		add_to_buf("%s", cursym->n_un.n_name);
	} else {
		add_to_buf("0x%X", addr);
	}
#else
d576 8
a583 5
	addr = REL16(i);
	if (addr > 0) {
		add_to_buf("+%d", addr);
	} else {
		add_to_buf("%d", addr);
a585 2
#endif

a586 1
#endif
@


1.2
log
@changed for X windows interface and d78 ==> d88
@
text
@d7 1
a7 1
static char rcsid[] = "$Header: disasm.c,v 1.1 88/01/25 13:51:47 robertb Exp $";
d559 1
a559 1
	f = whatblock(addr);
d578 1
a578 1
	f = whatblock(addr);
@


1.1
log
@init checkin after cupcake's crash
@
text
@d3 1
a3 1
 * This disassembles the passed M78000 instruction and prints it to the
d7 1
a7 1
static char rcsid[] = "$Header: disasm.c,v 1.4 88/01/13 22:29:24 robertb Exp $";
d14 1
a14 1
#include "fields78.h"
@
