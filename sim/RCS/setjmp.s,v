head     1.1;
access   ;
symbols  ;
locks    ; strict;
comment  @# @;


1.1
date     88.07.20.21.30.15;  author andrew;  state Exp;
branches ;
next     ;


desc
@setjmp routine, found in Rob's build tree.  Needed for successful make.
@



1.1
log
@Initial revision
@
text
@/* @@(#)setjmp.s	4.3 (Berkeley) 82/10/28 */

/*
 * setjmp.s
 *
 * $Header: setjmp.s,v 1.3 86/11/08 19:59:16 toddb Exp $
 * $Locker:  $
 *
 * Modifications from Berkeley 4.1c BSD
 * Copyright (c) 1983, 1986 Tektronix Inc.
 * All Rights Reserved
 *
 * setjmp and longjmp live here
 *
 */

#include "DEFS.h"

/*
 * C library -- setjmp, longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	setjmp(a)
 * by restoring registers from the stack
 * and doing a return.
 *
 * Under 4.2 BSD signals will no longer abort a system call so we
 * have to be able to longjmp out of a signal catcher, which means we
 * must restore the entire context (including signals).
 *
 * The setjmp routine saves the context from which it is called including
 * a dummy rendition of struct sigcontext (see signal.h).
 *
 * This is what jmp_buf (passed to setjmp and longjmp) looks like
 * after setjmp intializes it (base address in a0):
 *
 *	0(a0)	| d2 to restore		|  - registers
 *	4(a0)	| d3 to restore		|
 *	8(a0)	| d4 to restore		|
 *	12(a0)	| d5 to restore		|
 *	16(a0)	| d6 to restore		|
 *	20(a0)	| d7 to restore		|
 *	24(a0)	| a2 to restore		|
 *	28(a0)	| a3 to restore		|
 *	32(a0)	| a4 to restore		|
 *	36(a0)	| a5 to restore		|
 *	40(a0)	| a6 to restore		|
 * The following is a simulation of the sigcontext structure.
 *	44(a0)	| sc_onsigstack		|  - can't resolve, set to 0
 *	48(a0)	| sc_sigmask		|  - returned from sigblock(0)
 *	52(a0)	| sc_sp			|  - stack pointer to restore
 *	56(a0)	| sc_pc			|  - program counter to restore
 *	60(a0)	| sc_ps	(short)		|  - user psr
 *	62(a0)	| sc_index (short)	|  - signal index
 *	64(a0)	| sc_stack_frame	|  - (unused)
 *	68(a0)-71(a0) 			   currently unused
 */

	.globl	_sigblock

Q_ENTRY(setjmp)
	/*
	 * get sigmask value currently in effect
	 */
	clr.l	-(sp)			/* parameter for sigblock */
	jsr	_sigblock		/* this returns the signal mask */
	addq.l	#4,sp			/* don't mess with d0! */
	move.l	8(sp),a0		/* put the jmp_buf address in a0 */
	/*
	 * save registers
	 */
	movem.l	d2-d7/a2-a5,(a0)	/* save registers */
	move.l	(a6),40(a0)		/* save caller frame pointer */
	/*
	 * create a sigcontext structure in the buffer (see signal.h)
 	 */
	clr.l	44(a0)			/* can't resolve onstack for now */
	move.l	d0,48(a0)		/* save sigmask */
	lea	8(a6),a1
	move.l	a1,52(a0)		/* save sp (simulate return) */
	move.l	4(a6),56(a0)		/* save return pc */
	clr.w	60(a0)			/* save psr (close enough) */
	clr.w	62(a0)			/* can't resolve index for now */
	/*
	 * return from setjmp
	 */
	clr.l	d0			/* return 0 */
	unlk	a6
	rts

/*
 * longjmp(jump_buf, returnval)
 *
 * Before we make the magic trap (trap #10) we need to dummy up the "stack"
 * so it looks the way the kernel expects it too. (See sigvec.c in the
 * C library and sendsig() in machdep.c in the kernel.)
 * Right below sigcontext it expects the following on the stack:
 *
 * 0(sp)	sf_signum 	- we don't care
 * 4(sp)	sf_code 	- (unused)
 * 8(sp)	sf_scp		- pointer to sigcontext
 * 12(sp)	sf_sdp		- (unused)
 * 16(sp)	sf_sc		- sigcontext structure
 * 40(sp)	sf_sd		- sigdata structure (unused)
 */

L_ENTRY(longjmp)
	link	a6,#-11*4	/* allocate space for a sigframe structure */
	move.l	8(a6),a0		/* get jmp_buf address */
	move.l	12(a6),d0		/* get return value */
/*	clr.l	(sp)			/* signum (not needed) */
/*	clr.l	4(sp)			/* code (not needed) */
	lea	16(sp),a1		/* point to sigcontext */
	move.l	a1,8(sp)
/*	clr.l	12(sp)			/* sigdata pointer (not needed) */
	movem.l	44(a0),d1-d5		/* pick up sigcontext structure */
	movem.l	d1-d5,16(sp)		/* drop it in the stack */
	movem.l	(a0),d2-d7/a2-a6	/* restore registers */
	trap	#10			/* back door to kernel */
@
